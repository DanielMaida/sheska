ar
X
iv
:1
70
8.
07
45
0v
1 
 [
st
at
.M
L
] 
 2
4 
A
ug
 2
01
7
1
Bayesian Compressive Sensing Using Normal
Product Priors
Zhou Zhou, Kaihui Liu, and Jun Fang, Member, IEEE
Abstract—In this paper, we introduce a new sparsity-
promoting prior, namely, the “normal product” prior, and de-
velop an efficient algorithm for sparse signal recovery under the
Bayesian framework. The normal product distribution is the dis-
tribution of a product of two normally distributed variables with
zero means and possibly different variances. Like other sparsity-
encouraging distributions such as the Student’s t-distribution, the
normal product distribution has a sharp peak at origin, which
makes it a suitable prior to encourage sparse solutions. A two-
stage normal product-based hierarchical model is proposed. We
resort to the variational Bayesian (VB) method to perform the
inference. Simulations are conducted to illustrate the effectiveness
of our proposed algorithm as compared with other state-of-the-
art compressed sensing algorithms.
Index Terms—Compressed Sensing, sparse Bayesian learning,
normal product prior.
I. INTRODUCTION
C
OMPRESSED sensing [1], [2] is a new data acquisition
technique that has attracted much attention over the past
decade. Existing methods for compressed sensing can gener-
ally be classified into the following categories, i.e. the greedy
pursuit approach [3], the convex relaxation-type approach [4]
and the nonconvex optimization method [5]. Another class of
compressed sensing techniques that have received increasing
attention are Bayesian methods. In the Bayesian framework,
the signal is usually assigned a sparsity-encouraging prior,
such as the Laplace prior and the Gaussian-inverse Gamma
prior [6], to encourage sparse solutions. It has been shown
in a series of experiments that Bayesian compressed sensing
techniques [7] demonstrate superiority for sparse signal re-
covery as compared with the greedy methods and the basis
pursuit method. One of the most popular prior model for
Bayesian compressed sensing is the Gaussian-inverse Gamma
prior proposed in [6]. The Gaussian-inverse Gamma prior is a
two-layer hierarchical model in which the first layer specifies
a Gaussian prior to the sparse signal and an inverse Gamma
priori is assigned to the parameters characterizing the Gaussian
prior. As discussed in [8], this two-stage hierarchical model is
equivalent to imposing a Student’s t-distribution on the sparse
signal. Besides the Gaussian-inverse Gamma prior, authors in
[9] employ Laplace priors for the sparse signal to promote
sparse solutions.
Zhou Zhou, Kaihui Liu, and Jun Fang are with the National Key Laboratory
on Communications, University of Electronic Science and Technology of
China, Chengdu 611731, China, Email: ZhouZhou@std.uestc.edu.cn; kai-
huil@std.uestc.edu.cn; JunFang@uestc.edu.cn
This work was supported in part by the National Science Foundation of
China under Grant 61172114.
In this paper, we introduce a new sparsity-encouraging prior,
namely, the normal product (NP) prior, for sparse signal re-
covery. A two-stage normal product-based hierarchical model
is established, and we resort to the variational Bayesian (VB)
method to perform the inference for the hierarchical model.
Our experiments show that the proposed algorithm achieves
similar performance as the sparse Bayesian learning method,
while with less computational complexity.
II. THE BAYESIAN NETWORK
In the context of compressed sensing, we are given a noise
corrupted linear measurements of a vector x0
y = Ax0 + n (1)
Here A ? RM×N is an underdetermined measurement matrix
with low coherence of columns, n ? RM represents the
acquisition noise vector and x0 a sparse signal. For the inverse
problem, both x0 and n are unknown, and our goal is to
recover x0 from y. We formulate the observation noise as zero
mean independent Gaussian variable with variance ?2 i.e. y ?
N(Ax0, ?
2I) and seek a sparse signal x
?
= (x1, x2, . . . xN ) for
x0.
In this section, we utilize a two-stage hierarchical bayesian
prior for the signal model. In the first layer of signal model,
we use the Normal Product (NP) distribution as sparseness
prior:
x ? NP (0,?)
where 0 ? RN stands for its mean and ? given as a
diagonal matrix diag(?1
2, ?2
2, . . . , ?N
2) ? RN×N represents
its variance. For each element xi of x , its probability density
distribution is K0
(
|xi|
?i
)/
??i, which exhibits a sharp peak
?5 0 5
0
0.2
0.4
0.6
0.8
1
x
P
(x
)
Normal Product
Laplace
Normal
Fig. 1. Three kinds of PDF with the same standard deviation
2
at the origin and heavy tails, where K0(·) is the zero order
modified Bessel function of the second kind [10] thus the
probability density function (PDF) of x is
1
?N
?N
i=1
1
?i
K0(
|xi|
?i
). (2)
A NP distributed scaler variate xi ? R can be decomposed as
the product of two independent normally distributed variables
i.e. if xi ? NP (0, ?
2
i ), then there are ai ? N(0, ?
2
i ) and
bi ? N(0, ?
2
i ) satisfying xi = aibi with moment relationship
?i = ?i?i [11]. We call this property as the generating rule of
Normal Product distribution. Similarly for the vector x, we can
decompose it into the Hadamard product of two independent
virtual normally distributed vector variables a and b whose
variance are diagonal matrix ?2
?
= diag(?21, ?
2
2, . . . , ?
2
N) and
?2
?
= diag(?21 , ?
2
2 , . . . , ?
2
N ) respectively i.e. x = a ? b and
? = ?2 ? ?2, where ? denote the Hadamard product. Finally,
we set ??2i as a realization of Gamma hyperprior ?(?, ?) and
choose ? ? 0,? ? 0 to construct a sharper distribution of x
during the variational procedure [12] for the second layer of
signal.
According to the generating rule of Normal Product men-
tioned above, we can add two parallel nodes a and b to
construct one latent layer. Then the posterior distribution can
be expressed as:
Px(x,?|y;?, ?) =
?
P (x, a,b,?|y;?, ?)dadb
where
P (x, a,b,?|y;?, ?)
? P (y|x)P (x|a,b)P (a|?2)P (b|?2)P (?|?, ?)
= P (y ?Ax)?(x ? a ? b)P (a|?2)P (b|?2)P (?|?, ?)
and ?(·) denotes the Dirac Delta function. In this expression
we know that the value of x must be equal to a ? b while
keeping the value of P (x, a,b,?|y;?, ?) nonzero. Consider
the Bayesian Risk function:
E(L(x?,x)) =
?
L(x?,x)Px(x,?|y;?, ?)dxd?
?
?
L(x?, a ? b)Pa,b(a,b,?|y;?, ?)dadbd?
where
Pa,b(a,b,?|y;?, ?)
= P (y ?A(a ? b))P (a|?2)P (b|?2)P (?|?, ?)
and L(x?,x) represents the loss function. Thus, we can replace
Px(x,?|y;?, ?) with Pa,b(a,b,?|y;?, ?) in the inference
procedure while maintaining the value of the Bayesian risk
function at a consistent level. So the modified Bayesian
Network is:
y ? N(A(a ? b), ?2I) (3)
a ? N(0,?2) (4)
b ? N(0,?2) (5)
??2i = ?
?2
i ?
?2
i ? ?(?, ?) (6)
as depicted in Fig. 2.
Fig. 2. The Bayesian Network
III. THE VARATIONAL BAYESIAN INFERENCE
In order to infer the bayesian network, we use the mean-field
variational Bayesian method to analytically approximate the
entire posterior distribution of latent variable. In this theorem,
it was assumed that the approximate variational distribution
q(z|y) where z stands for the latent variable in the model could
be factorized into the product
?l
i=1 qi(zi|y) for the partition
z1, . . . , zl of z. It could be shown that the solution of the
variational method for each factor qi(zi|y) could be written
as:
qi
?(zi|y) =
e<ln p(z|y))> 6=zi
?
e<ln p(z|y))> 6=zidzi
where < ln p(z|y))> 6=zi means taking the expectation over
the set of z using the variational distribution except zi [13] .
Applying the variational Bayesian method upon the bayesian
model mentioned in secetion II, the posterior approximation
of ?, a,b are respectively:
ln(q?(a)) ?< lnP (a,b,?|y;?, ?)>q?(b),q?(?) (7)
ln(q?(b)) ?< lnP (a,b,?|y;?, ?)>q?(a),q?(?) (8)
ln(q?(?)) ?< lnP (a,b,?|y;?, ?)>q?(b),q?(a) (9)
A. posterior approximation of a and b
Substituting (3), (4), (5) and (6) into (8), we can arrive at:
q?(b)? N(??
?1
c?,??
?1
)
where
?? =
1
?2
(ATA)? < aaT>q?(a)+ < ?
?2>q?(?)
and
c? =
1
?2
diag
(
< a>q?(a)
)
ATy
. From the principle of variational inference, we know that
q (b) is an approximation of P (b|y) i.e. P (b|y) ? q (b) and
in order to get a more concise iteration formula, we choose
the relaxation of the secondary moment as:
< aaT>q?(a) ?< a>q??(a) < a
T>q??(a)
< ??2>q?(?) ?< ? >
?2
q??(?)
3
This relaxation can be interpreted as ignoring the posteriori
variance during the updating, which is inspired by the fact
that after the learning procedure the posteriori variance always
approaches zero to ensure the posteriori mean’s concentration
on the estimated value.
Then the corrected posterior approximation is q??(b) ?
N(??1c,??1) where
??1 = { 1
?2
(
Adiag
(
< a>q??(a)
))T
Adiag
(
< a>q??(a)
)
+ < ?>q??(?)
?2}?1
and
c =
1
?2
diag
(
< a>q??(a)
)
ATy
In the noise free case, using Woodbury identity we have:
lim
??0
??1c
=< ?>q??(?)(Adiag(< a>q??(a)) < ?>q??(?))
+
y
(10)
and
lim??0?
?1
= (I? < ?>q??(?)
(
Adiag
(
< b>q??(b)
)
< ?>q??(?)
)+
)
×Adiag
(
< a>q??(a)
)
< ? >2
q??(?)
(11)
Similarly, for a, substituting (3), (4), (5) and (6) into (7), we
have:
q?(a)? N(H?
?1
f ?,H?
?1
)
where
H? =
1
?2
(ATA)? < bbT>q?(b)+ < ?
?2>q?(?)
and
f ? =
1
?2
diag
(
< b>q?(b)
)
ATy
So the corrected approximation is:
q??(a) ? N(H?1f ,H?1)
Then again, in the noiseless case, we have
lim??0H
?1f
=< ?>q??(?)(Adiag(< b>q??(b)) < ?>q??(?))
+y
(12)
and
lim??0H
?1
= (I? < ?>q??(?)
(
Adiag
(
< b>q??(b)
)
< ?>q??(?)
)+
)
×Adiag
(
< b>q??(b)
)
< ? >2
q??(?)
(13)
B. posterior approximation of ?
As discussed in section II, we have:
ln(q?(?)) = ln(q?(?2 ? ?2)) = ln(q?(?2)) + ln(q?(?2))
?< lnP (a,b,?2 ? ?2|y;?,?)>q??(b),q??(a)
Substituting (4), (5), (6) into (9) and using the separability of
ln(q?(?2)), it can be shown that:
lnq
(
?2i
)
? ? 12
(
< a2i>q??(a) + 2? < ?i
?2>q?(?2
i
)
)
?i
?2
+(?+ 12 ? 1) ln
(
?i
?2
)
which means
?i
?2 ? ?(
1
2
+ ?,
1
2
(< a2i>q??(a) + 2? < ?i
?2>q?(?2)))
and
< ?i
?2>q?(?2) =
1
2 + ?
1
2 (< a
2
i>q??(a) + 2? < ?i
?2>q?(?2))
(14)
Similarly, we have:
?i
?2 ? ?(
1
2
+ ?,
1
2
(< b2i>q??(b) + 2? < ?i
?2>q?(?2)))
and
< ?i
?2>q?(?2) =
1
2 + ?
1
2 (< b
2
i>q??(b) + 2? < ?i
?2>q?(?2))
(15)
C. The Proposed Algorithm
As a result, we summarize the procedure above as two
algorithms named “NP-0” and “NP-1” which represent the
inference results for the one layer signal model and two layer
signal model respectively. The difference between Np-0 and
NP-1 is whether the learning process updates the precision of
Normal Product.
Algorithm 1: NP-0 (One Layer Normal Product)
Input: A,y
Output: x(t)
1: < a>(0) ? 1, < b>(0) ? 1,< ? >? 1,< ? >? 1, ?, tmax ,
2: while
?
?x(t) ? x(t?1)
?
? /
?
?x(t?1)
?
? > ? and t < tmax do
3: Update < a>(t) using (12)
4: Update < b>(t) using (10)
5: x(t) =< a>(t)? < b>(t)
6: t = t+ 1
7: end while
The algorithm NP-0 is similar to the FOCUSS algorithm
[14]. The difference between them is that NP-0 uses < a >(t)
and < b >(t), the decomposed component of x(t) in an
interleaved way to update x(t+1) while FOCUSS uses the
whole x(t) to directly update x(t+1). Furthermore, we set the
initial value of the algorithm as a constant to avoid the local
minimum results being returned.
Algorithm 2: NP-1 (Two Layers Normal Product)
Input: A,y
Output: x(t)
1: < a>(0) ? 1, < b>(0) ? 1,?? 0, ? ? 0, ?, tmax
2: while
?
?x(t) ? x(t?1)
?
? /
?
?x(t?1)
?
? > ? and t < tmax do
3: Update < a>(t) using (12)
4: Update V ar(a)(t) using (13)
5: Update < b>(t) using (10)
6: Update V ar(b)(t) using (11)
7: x(t) =< a>(t)? < b>(t)
8: Update < ?i
?2 >
(t)
q?(?2)
using (14)
9: Update < ?i?2 >
(t)
q?(?2)
using (15)
10: t = t+ 1
11: end while
The algorithm NP-1 looks like coupling two sparse
Bayesian learning (SBL) [6], [8] procedures together and we
will experientially prove that the MSE via NP-1 descends
faster than SBL in section IV.
4
IV. NUMERICAL RESULTS
In this section, we compare our proposed algorithms among
SBL, iterative reweighted least squares (IRLS) [15] and basis
pursuit (BP) [4]. In the following results, we set the dimension
of original signal to be 100 and in each experiment every
entries of the sensing matrix A is uniformly distributed as
standard normal random variable. The stop criterion parame-
ters ? and tmax in both algorithm NP-0 and NP-1 are set as
10?3 and 300 respectively.
The success rate in the Fig. 3 is defined by the average
probability of successful restoration, which is counted as the
ratio between the number of successful trials and the total
number of the independent experiments. It collects the result
of 300 Monte Carlo trials and we assume successful trial
if ?x?? x?2/?x?2 < 10
?3, where x? is the estimate of the
original signal x. The mean squared error (MSE) in Fig. 4
which measures the average of the squares of the difference
between the estimator and estimated signal is calculated as
follow:
MSE(dB) = 20 log(?x?? x?2/?x?2)
Fig. 3 demonstrats the superior performance of the NP-1
algorithm in a few measurements. It shows the success rate
of respective algorithms versus the number of measurement
M and sparse level K of the signal. We can see that the
reconstruction performance of the one layer normal product
algorithm(NP-0) is almost the same as BP, which is the
MAP estimation of unknowns in the one layer Laplace prior
framework. The comparisons also show that the two layers
normal product algorithm(NP-1) requires as few number of
CS measurements as SBL while inheriting the similar recon-
struction precision.
In Fig. 4, the comparison among the computational cost
of the three algorithms on the reconstruction performance are
performed on a personal PC with dual-core 3.1 GHz CPU
and 4GB RAM. It is interesting to note that the MSE of
NP-1 descends faster than SBL in Fig. 4(a) while it has the
same sparsity-undersampling tradeoff performance as SBL. It
should also be noticed that we haven’t use any basis pruning
technology as in [16] to reduce the computational complexity.
To understand the reason of low computational time from Fig.
4(b), we observe that the NP-1 requires only a few numbers
of iterations to arrive at stop condition. In summary, these
experimental results confirm that the NP-1 is a fast Sparse
Bayesian algorithm.
V. CONCULSION
In this letter, we formulated a Normal Product prior based
Bayesian framework to solve the compressed sensing prob-
lem in noise free case. Using this framework, we derived
two algorithms named NP-0 and NP-1 and compared them
with different algorithms. We have shown that our algorithm
NP-1 has the similar reconstruction performance with SBL
while the interleaved updating procedure provides improved
performance in computational times.
0 5 10 15 20 25 30
0
0.2
0.4
0.6
0.8
1
M
S
u
c
c
e
s
s
 R
a
te
SBL
NP?1
NP?0
IRLS
0
BP
(a) K=3
0 5 10 15 20 25 30
0
0.2
0.4
0.6
0.8
1
K
S
u
c
c
e
s
s
 R
a
te
SBL
BP
NP?1
NP?0
IRLS
0
(b) M=30
Fig. 3. Simulation results of Success Rate
0 0.02 0.04 0.06 0.08 0.1
?120
?100
?80
?60
?40
?20
0
20
Computation Time (s)
M
S
E
 (
d
B
)
SBL
NP?1
IRLS
(a) K=3,M=30
0 20 40 60 80 100
?140
?120
?100
?80
?60
?40
?20
0
20
The Number of Iterations
M
S
E
 (
d
B
)
SBL
NP?1
IRLS
(b) K=3,M=30
Fig. 4. Simulation results of Computational Cost
REFERENCES
[1] D. L. Donoho, “Compressed sensing,” IEEE Trans. Inf. Theory, vol. 52,
no. 4, pp. 1289–1306, 2006.
[2] E. J. Cande?s, J. Romberg, and T. Tao, “Robust uncertainty principles:
Exact signal reconstruction from highly incomplete frequency informa-
tion,” IEEE Tran. Inf. Theory, vol. 52, no. 2, pp. 489–509, 2006.
[3] J. A. Tropp and A. C. Gilbert, “Signal recovery from random mea-
surements via orthogonal matching pursuit,” IEEE Trans. Inf. Theory,
vol. 53, no. 12, pp. 4655–4666, 2007.
[4] S. S. Chen, D. L. Donoho, and M. A. Saunders, “Atomic decomposition
by basis pursuit,” SIAM J. Sci. Comput., vol. 20, no. 1, pp. 33–61, 1998.
[5] R. Chartrand, “Exact reconstruction of sparse signals via nonconvex
minimization,” IEEE Signal Process. Lett., vol. 14, no. 10, pp. 707–
710, 2007.
[6] M. E. Tipping, “Sparse bayesian learning and the relevance vector
machine,” J. Mach. Learn. Res., vol. 1, pp. 211–244, 2001.
[7] S. Ji, Y. Xue, and L. Carin, “Bayesian compressive sensing,” IEEE Trans.
Signal Process., vol. 56, no. 6, pp. 2346–2356, 2008.
[8] D. P. Wipf and B. D. Rao, “Sparse bayesian learning for basis selection,”
IEEE Trans. Signal Process., vol. 52, no. 8, pp. 2153–2164, 2004.
[9] S. D. Babacan, R. Molina, and A. K. Katsaggelos, “Bayesian compres-
sive sensing using laplace priors,” IEEE Trans. Image Process., vol. 19,
no. 1, pp. 53–63, 2010.
[10] E. W. Weisstein. Normal product distribution. MathWorld–
A Wolfram Web Resource. [Online]. Available:
http://mathworld.wolfram.com/NormalProductDistribution.html
[11] A. SEIJAS-MACI?AS and A. OLIVEIRA, “An approach to distribution
of the product of two normal variables.” Discussiones Mathematicae:
Probability & Statistics, vol. 32, 2012.
[12] D. Wipf, J. Palmer, and B. Rao, “Perspectives on sparse bayesian
learning,” Computer Engineering, vol. 16, no. 1, p. 249, 2004.
[13] D. G. Tzikas, C. Likas, and N. P. Galatsanos, “The variational approx-
imation for bayesian inference,” IEEE Signal Process. Mag., vol. 25,
no. 6, pp. 131–146, 2008.
5
[14] I. F. Gorodnitsky and B. D. Rao, “Sparse signal reconstruction from
limited data using focuss: A re-weighted minimum norm algorithm,”
IEEE Trans. Signal Process., vol. 45, no. 3, pp. 600–616, 1997.
[15] R. Chartrand and W. Yin, “Iteratively reweighted algorithms for com-
pressive sensing,” in Proc. ICASSP, 2008, pp. 3869–3872.
[16] M. E. Tipping, A. C. Faul et al., “Fast marginal likelihood maximisation
for sparse bayesian models,” in Proc. 9th Int. Workshop on AIStats,
vol. 1, no. 3, 2003.
