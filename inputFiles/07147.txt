ar
X
iv
:1
70
8.
07
14
7v
1 
 [
cs
.L
G
] 
 2
3 
A
ug
 2
01
7
Classification via Tensor Decompositions
of Echo State Networks
Ashley Prater
Air Force Research Laboratory
Information Directorate
Rome, NY 13440
ashley.prater.3@us.af.mil
Abstract—This work introduces a tensor-based method to per-
form supervised classification on spatiotemporal data processed
in an echo state network. Typically when performing supervised
classification tasks on data processed in an echo state network,
the entire collection of hidden layer node states from the training
dataset is shaped into a matrix, allowing one to use standard
linear algebra techniques to train the output layer. However, the
collection of hidden layer states is multidimensional in nature,
and representing it as a matrix may lead to undesirable numerical
conditions or loss of spatial and temporal correlations in the data.
This work proposes a tensor-based supervised classification
method on echo state network data that preserves and exploits the
multidimensional nature of the hidden layer states. The method,
which is based on orthogonal Tucker decompositions of tensors,
is compared with the standard linear output weight approach
in several numerical experiments on both synthetic and natural
data. The results show that the tensor-based approach tends
to outperform the standard approach in terms of classification
accuracy.
I. INTRODUCTION
Echo State Networks (ESNs), first introduced in [9] and [20]
under the name Liquid State Machines, have been shown to be
effective at performing classification and temporal prediction
tasks on spatiotemporal data, including such diverse tasks as
speech recognition [20], [26], [31], [11], [24], chaotic time-
series prediction [10], and forming the objective function in
reinfocement learning methods [3], [28]. ESNs are a special
type of recurrent neural network (RNN). Typically the hidden
layer in an RNN is trained using a computational expensive
back propagation method [32]. In ESNs however, the weights
of the hidden layer are randomly assigned with sparse, random
connections among the nodes. The hidden layer of an ESN is
often called a reservoir, with the collection of node values
called the reservoir states. The advantages ESNs offer over
traditional RNNs include a much faster training time, and a
configuration that does not require retraining to use in new
applications on different datasets.
In ESNs, only the output layer is trained for a particular
task, and the training generally produces linear output weights
using a regularized least squares approach [6], [9], [18], [19].
Recently, the output layer of an ESN was replaced with a
classification scheme based on the principal components of the
reservoir states [23], [24]. This approach showed promise in
improving classification accuracy and in being more robust to
noisy perturbations in the input data than the traditional linear
trained output weights approach. However, the collection of
reservoir states generated by an ESN is multidimensional in
nature. Both trained linear output weights and the principal
components approaches require one to superficially flatten
the reservoir data into matrices, potentially eliminating or
weakening spatial and temporal correlations present in the
data in the process. Additionally, flattening the reservoir data
may result in a very overdetermined system, especially for
the trained linear output weights approach, which may yield
overtrained or overly sensitive results. For example, see [23].
To this end, this work proposes a tensor-based supervised
classification method for use with reservoir states of ESNs.
Tensors, or multidimensional arrays, are natural structures for
representing collections of reservoir data. Rather than using
the raw reservoir data, the tensors will be approximated using
a Tucker decomposition [29], with each mode having a factor
matrix of smaller rank along with an associated core tensor
that extracts the higher order features of the data. This decom-
position enables one to reduce the complexity of the training
tensor data by keeping only the most significant contributions
while preserving the multidimensional correlations among the
features.
The following notation appears in this work. Tensors will be
written in a script capital letters, e.g. A, matrices will appear
as capital latin letters, e.g. A, and vectors and scalars will
be lower case latin or greek letters, e.g. a or ?. Elements of
an array will be given in ‘matlab’ notation. Thus the (i, j)th
element of matrix A, that is the element in the ith row and j th
column, will be denoted by A(i, j). The vector determined by
extracting the j th column from A is denoted by A(:, j). Similar
notation holds for lower or higher-order arrays. The usual
matrix-matrix multiplication will be represented by writing
the matrices adjacent to one another. This is in contrast to
modal tensor-matrix multiplication, which will be defined in
Section II. Superscripts will denote indices in a set, not power-
wise multiplication, except for when the base is a set as in RN .
The Hermitian transpose of a matrix A is given by A?. Finally,
ek will denote a vector, of length clear from context, with a
‘1’ in the k-th position and zeros elsewhere.
The remainder of this paper is organized as follows. Sec-
tion II discusses background information for ESNs and rele-
vant tensor decompositions. Section III describes the proposed
classification method using tensor decompositions on the
reservoir states. The results of several numerical experiments
are presented in Section IV. Finally, Section V contains
conclusions and a dicussion of future work.
II. BACKGROUND
In this section, background information is given on tensor
decompositions and echo state networks.
A. Tensor Decompositions
A tensor is a higher-order analogue of a vector; A vector
is a first-order tensor, a matrix is a second-order tensor,
and so on. Tensors are natural structures to represent and
investigate multidimensional data. For example, video may
be considered a third-order tensor, with the first two modes
describing the x and y pixel coordinates of a single frame,
and the third mode representing time variations. Tensors have
been used to represent and explore relationships among data in
diverse research areas and applications, including video pro-
cessing [15], multiarray signal processing [17], independent
component analysis [7], and others.
One challenge to employing tensor methods is the volume of
the data, which suffers from the so-called ‘curse of dimension-
ality’ [2]. That is, the amount of data increases exponentially
with each additional mode, and naive tensor methods quickly
become intractable. To help alleviate this challenge various
approaches have been proposed, including several types of
low-rank and sparse representations [25]. In this work, we
will employ the orthogonal Tucker-2 decomposition.
Before discussing the decomposition, some definitions need
to be introduced. Let A ? RI1×I2×···×IN be an N th-order ten-
sor, with nth mode having dimension In, and let B ? R
Jn×In
be a matrix. The nth mode product of A by B is the nth-order
tensor A×n B ? R
I1×I2×···×In?1×Jn×In+1×···×IN whose en-
tries are given by
(A×n B)(i1, i2, . . . , in?1, jn, in+1, . . . , in) =
=
In
?
in=1
A(i1, i2, . . . , iN )B(jn, in)
[5], [12], [22].
Modal products of a tensor by matrices are commutative,
provided the modes are distinct. That is, given the tensor
A ? RI1×I2×...×IN and the matrices B ? RJn×In and
C ? RJm×Im , then
(A×n B)×m C = (A×m C)×n B = A×n B ×m C,
provided m 6= n.
A tensor may be represented as a matrix through the process
of unfolding [12], [13], similar to the way a matrix may be
represented as a vector by vectorization. The matrix unfolding
of A in the third mode is the matrix A(3) ? R
I1×(I2I3) with
elements
A(3)(i1, (i3 ? 1)I2 + i2) = A(i1, i2, i3).
One may think of A(3) as the concatenated matrix
A(3) =
[
A(:, :, 1)|A(:, :, 2)| · · · |A(:, :, I3)
]
.
Unfoldings of higher-order tensors or in different modes
follow an analogous procedure.
An inner product may be defined on tensors as follows. Let
?·, ·? : RI1×···×IN × RI1×···×IN ? R
be defined by
?A,B? =
?
i1,...,iN
A(i1, . . . , iN)B(i1, . . . , iN ).
This inner product induces the tensor Frobenius norm,
?A? =
?
?A,A?.
Now equipped with the requisite definitions, we are ready
to build the orthogonal Tucker-2 tensor decomposition.
The Tucker decomposition expresses a tensor as the modal
product of a core tensor by several matrices [4], [12], [29].
For a third-order tensor AI1×I2×I3 , the Tucker decomposition
is
A = B ×1 A×2 B ×3 C, (1)
where A ? RJ1×I1 , B ? RJ2×I2 and C ? RJ3×I3 are the
factor matrices, typically with Jn ? In, and B ? R
J1×J2×J3
is the core tensor. If the matrices A,B and C each have
orthogonal columns, then (1) is called an orthogonal tucker
decomposition, and is expressed as
A = B ×1 U ×2 V ×3 W. (2)
A variant of the orthogonal Tucker decomposition, called
the Tucker-2 decomposition, is of the form
A = F ×1 U ×2 V, (3)
with core tensor F ? RJ1×J2×I3 . That is, the original
tensor A of order greater than two is written using only two
factor matrices. An illustration of the decomposition (3) is
shown in Figure 1. This type of decomposition was used
in [22] to perform feature extraction and classification of a
collection of 2-dimensional signals, where the third mode of
the tensors A and F correspond to the individual samples
in the training dataset. Note that in the decomposition (3),
the basis matrices U and V are universal across the entire
tensor A. In classification tasks, this method does not generate
different basis matrices for distinct classes in the data set.
The decomposition (3) and classification methods using it will
be discussed further in Section III for use with Echo State
Network data.
B. Echo State Networks
Spatiotemporal data are processed in an echo state network
as follows. Let A ? RL×T be an input of spatial dimension L
and temporal length T . The values of the hidden layer nodes,
also referred to as the reservoir states of the input A, denoted
by X ? RN×T , are determined by the recursion
X(:, t+ 1) = (4)
= (1? ?)X(:, t) + ?f (WinA(:, t) +WresX(:, t) + ?) .
=
A U?
F
V
Fig. 1: An illustration of the two-way orthogonal Tucker decomposition (3).
In (4), f is a nonlinear activation function, Win ? R
N×L are
the fixed input weights, Wres ? R
N×N are the fixed, randomly
assigned reservoir weights, ? is a bias value, and ? ? [0, 1]
is the leaking rate. This work does not use output feedback in
the ESN recursion as is sometimes used in literature [9], since
it is incompatible with using the proposed tensor approach.
For supervised classification tasks, one will have a col-
lection of training samples. Suppose the training data are
partitioned into K classes, and the kth class contains Ik
examples. Say
Tr :=
{
A1, A2, . . .
}
is the entire collection of training inputs and
Trk :=
{
Ak1 , Ak2 , . . . , AkIk
}
is the collection of training inputs from the kth class. Suppose
each of the inputs are processed in the ESN (4) with the
same weights and parameters. Denote the reservoir states from
the input Akj as Xkj . All of the reservoir states from Trk
may be concatenated along the third mode into the tensor
X k ? RN×T×|Trk|, where
X k(:, :, j) = Xkj .
A representation of the tensor X k is shown in Figure 2.
Similarly, all of the reservoir states may be concatenated along
the third mode into the tensor X ? RN×T×|Tr|.
Xk1
Xk2
XkIk
X (k) =
Fig. 2: A representation of the tensor X (k), whose frontal
slices are collections of reservoir states from the kth collection
of training inputs.
Traditionally, a collection of linear output weights is trained
on the unfolded collection of training reservoir tensors. Let
X(3) ? R
N×T |Tr| be the unfolding of X along the third mode.
That is, X(3) may be written as the contatenation
X(3) =
[
X (:, :, 1)|X (:, :, 2)| · · · |X (:, :, |Tr|)
]
.
Let y ? RK×T |Tr| be a matrix whose columns in-
dicate class membership. Say the columns of y satisfy
y(:, (j ? 1)T + t) = ek.
In the standard approach [9] to performing classification
using ESNs, first ones finds a collection of output weights
Wout ? R
K×N so that
WoutX(3) ? y. (5)
Commonly a solution to (5) is found using a regularization
method, such as
Wout = argmin
W?RK×N
{
?
?WX(3) ? y
?
?
2
2
+ ??W?22
}
. (6)
If a new input A belongs to the kth class at time t, and
Wout describes the data well, then WoutA(:, t) ? ek. This
observation drives the classification scheme. Say the input A
from the test set with reservoir states X is predicted to belong
to class k at time t if the the maximal element of the vector
WoutX(:, t) is in the k
th entry. Similarly, A is predicted to
belong to the kth class overall if the vector
?
t
WoutX(:, t) (7)
is maximized in the kth entry. Note that a single output weight
matrix (6) is found and applied to all test samples at all time
steps.
Training output weights as in (6) is fast, however this
approach does have weakensses. The system (5) is typi-
cally overdetermined. Although the regularization (6) tries
to overcome this, the matrix X(3) may have several orders
of magnitude more columns than rows in practice and may
poorly represent the data, even with regularization. This may
be controlled by the model by selecting only a subset ? ?
{1, 2, . . . , T } of times at which to sample the reservoir. One
common method is to use only a single point ? = {T } [9],
however the accuracy results may suffer greatly [23]. Even
though the reservoir states hold some ‘memory’ of previous
states, using only a subset of the data generally results in
information loss. Moreover, the unfolding procedure loses
some temporal correlations of reservoir node behavior. Finally,
using a single linear output weight may simply be insufficient
to separate the classes in the dataset well, as shown in [24].
III. TENSOR DECOMPOSITIONS OF RESERVOIR STATES
To alleviate the deficiencies encountered using method (7),
this paper proposes using a classification method based on the
decomposition of the tensor of training reservoirs. To this end,
let approximations of the orthogonal Tucker decompositions
of the tensors X and X k be
X ? F ×1 U ×2 V (8)
and
X k ? Fk ×1 U
k ×2 V
k (9)
where the factors U,Uk ? RN×J1 , V, V k ? RT×J2 have or-
thogonal columns with J1 ? N and J2 ? T , and
F ? RJ1×J2×|Tr| and Fk ? RJ1×J2×Trk are core tensors. The
core tensors may be intrepreted as the entry F(i1, i2, j)
describing the strength of the feature in the reservoir states of
the j th input captured by the interaction of the bases U(:, i1)
and V (:, i2) [22].
To approximate the Tucker-2 decomposition of the form (8),
we use the Higher-Order Orthogonal Iteration (HOOI) al-
gorithm, first introduced in [5] and explored in [22]. For
completeness, we include the pseudocode as Algorithm 1.
A similar procedure can be used to obtain the decomposi-
tions (9).
Algorithm 1 HOOI
1: Inputs: Tensor of reservoir states from the training set X ;
Factor ranks J1, J2; tol > 0.
2: Outputs: Factor matrices U, V and core tensor F .
3: Initialization: Let n = 0. Randomly choose basis factor
matrices U0 and V 0.
4: while max{?Sn1 ? S
n+1
1 ?, ?S
n
2 ? S
n+1
2 ?} ? tol do
5: Update mode-1 factor:
6: B = X ×2 (V
n)
?
7: [u, s, v] = svd(B(1))
8: Un+1 = u(:, 1 : J1), S
n+1
1 = diag(s)
9:
10: Update mode-2 factor:
11: B = X ×2 (U
n+1)
?
12: [u, s, v] = svd(B(2))
13: V n+1 = u(:, 1 : J2), S
n+1
2 = diag(s)
14:
15: n? n+ 1
16: end while
17: U = U end, V = V end
18: F = X ×1 U
? ×2 V
?
In [5], the factor matrices U (0), V (0) are initialized as the
dominant left singular subspace of the unfolded tensors X(1)
and X(2). In this work, we randomly initialize them for two
reasons. First, just finding the dominant subspaces of the
unfolded matrices is a very computationally intensive task if X
is large. In practice, this step may be intractable, even if steps
6 and 11 in Algorithm 1 are computable. Second, it was noted
in experiments that randomly initializing the factors results in
only a few additional iterations. Algorithm 1 uses a stopping
criterion based on the convergence of the singular values found
in Steps 6 and 11, this is to avoid problems in difference in
signs when using a criterion based on the factor matrices.
One may perform classification using the decomposi-
tions (8) and (9) obtained from collections of reservoir states
of a training set. To do so, suppose A is a new input signal
with reservoir states X . Although X is a matrix rather than a
three dimensional tensor, it can still be expressed in terms of
the factor matrices from the Tucker decompositions. Say
X = G×1 U ×2 V (10)
and
X = Gk ×1 U
k ×2 V
k (11)
for each k, where G and Gk are the core matrices, and
U, V, Uk, V k are found in the training step. Since the factor
matrices are orthogonal and X is a matrix, Equations (10)
and (11) may be rewritten as
G = X ×1 U
? ×2 V
? = U ?XV (12)
and
Gk = X ×1 U
k? ×2 V
k? = Uk
?
XV k. (13)
Indeed, each frontal slice of F is of the form (12), with a
collection of reservoir states from the training set in place of
X . It is reasonable to assume that inputs from the same class
have similar reservoir responses, and therefore also produce
similar frontal slices in the core tensors. Therefore, one may
predict that an input A belongs to the kth class if the slices
from Trk describe G well. That is, say A is in the k
th class if
j = argmin ?G?F(:, :, j)? (14)
and U j ? Trk. Similarly, one could predict U belongs to the
kth class if
k = argmin
k
{
min
j
?
?Gk ?F(:, :, j)
?
?
}
. (15)
IV. EXPERIMENTAL RESULTS
In this section, the results of numerical experiments are
given, comparing the classification accuracy using ESNs with
the linear output weight approach (6) with the proposed tensor-
based classification methods (14), and (15). Three datasets
are used. The first dataset uses inputs that randomly switch
between sine wave and square wave segments. The second
dataset is a subset of the USPS collection of handwritten digits.
The final dataset is a collection of cepstrum coefficients from
audio recordings of speakers saying the Japanese vowel ‘ae’.
All experiments are performed in MATLAB 2017a on a
PC with 16GB RAM. Several parameter combinations are
considered for each dataset, with experiments repeated a
number of times for each combination. The randomizations
in the weights Win and Wres and in generating training and
testing datasets are reselected for each experiment, however
they are held constant for all classification methods within a
single experiment.
A. Sine vs. Square Wave
In this collection of experiments, the input signals are
formed by randomly placing sine and square wave segments
of length and period 100, and paired with an indicator matrix
y ? R2,T where
y(:, t) =
?
?
?
?
?
?
?
?
[
1 0
]?
, if u is a sine wave at time t,
[
0 1
]?
, if u is a square wave at time t.
A sample training input is shown in Figure 3. A dataset of this
type has been studied in previous ESN work, including [23]
for use with ESN matrix principal component output layer
classification methods, and [21], [33] for study using photonic
reservoirs.
0 200 400 600 800 1000
?1
?0.5
0
0.5
1
Fig. 3: A typical input signal from the ‘Sine vs. Square Wave’
example.
The training data is formed by generating 20 dis-
tinct input patterns, each containing 100 segments of
randomly placed sine and square waves. The test set
is generated similarly, but contains 50 distinct pat-
terns. The ESN parameters used in the simulations
are N ? {10, 20, 100}, f ? {tanh, sin}, ? ? {0, ?/4} and
? = 1. For each (N, f, ?), the experiments are repeated 50
times with new randomizations in Wres, Win and the training
and testing sets. For tensor-based classification, we used the
method (15) with ranks R1 = ?N/5?, R2 = 5, R3 = 1. The
choice R3 = 1 is justified because the the dataset is rather
simple; only one type of square wave and one type of sine
wave are used in generating the samples.
For tensor-based classification, the data generated by the
ESNs on the training set are partitioned into two tensors
X 1 ? RN×100×I1 and X 2 ? RN×100×I2 , where X 1 contains
the reservoir states corresponding to the ‘sine’ inputs, and
X 2 contains the reservoir states corresponding to the ‘square’
inputs. Each tensor is decomposed as in (9):
X 1 ? F2 ×1 U
1 × V 1,
and
X 2 ? F2 × U2 × V 2.
For each test set element, the segments of length 100 are
classified according to (15). That is, let A be a new in-
put pattern from the test set with reservoir states X . Let
Xt = X(:, 100(t? 1) + 1 : 100t) be the collection of states
corresponding to the tth input segment of A. Say that the tth
segment is classified as a ‘sine’ wave if
min
j1
?
?
?
Xt ×1 U
1? ×2 V
1? ?F1(:, :, j1)
?
?
?
?
? min
j2
?
?
?
Xt ×1 U
2? ×2 V
2? ?F2(:, :, j2)
?
?
?
and as a ‘square’ wave segment if the inequality sign is flipped.
For trained linear output weights-based classification, we
generate a single matrix Wout via Equation (6), and perform
classification on the test set both pointwise and block-wise on
each input segment as in Equation (7).
The mean and standard deviation of the percent classifica-
tion accuracy results using these methods over 50 simulations
for several parameter choices are displayed in Table I. The
tensor-based classification method, in columns labeled ‘Ten-
sor’, achieved 100% accuracy in every simulation on both
the training and testing datasets. The pointwise and block-
wise output weight classification methods, in columns labeled
‘Weights (pt)’ and ‘Weights (bk)’ respectively, achieved good
classification accuracy for some parameter choices, but poor
results for others. The block-wise method is sensitive to the
number of nodes in the ESN and the bias choice, and in
particular achieved near-perfect test set classification accuracy
when ? was chosen well. On the other hand, the pointwise
output weights method achieved near perfect results only when
? was chosen well and N was sufficiently large.
Although (15) is an instance-based classifier, 100% classi-
fication accuracy on the test set is not guaranteed. Individual
sine or square segments are indeed identical whether from
the training or testing set. However, the resulting reservoir
states from these segments are all distinct due to the memory
of the reservoir. That is, the reservoir is not in a resting
state when accepting segments in a sequence, and the initial
state will continue propagating through the reservoir for some
time. The ouput weight Wout includes this contamination when
it is trained, however the tensor decomposition method can
capture the contribution from the initial state in only a small
number of factors, while focusing primarily on the reservoir
behavior stemming from the input itself. Overall, the tensor-
based approach outperformed the output weights method in
that it achieved a higher classification accuracy on the test set
for all parameter choices.
For comparison, this dataset was also studied in [21], [30],
[33], with best reported error rates of NMSE ? 1.5 × 10?3
in [21], 2.5% misclassifications in [30] and 0.3% in [33].
Training Testing
N Weights (pt) Weights (bk) Tensor Weights (pt) Weights (bk) Tensor
(
f = sin
? = 0
) 10 52.01 (0.75) 52.00 (10.88) 100.00 (0.00) 51.88 (0.67) 49.28 (6.77) 100.00 (0.00)
20 53.22 (1.05) 48.90 (13.03) 100.00 (0.00) 53.11 (0.59) 47.68 (7.88) 100.00 (0.00)
50 56.41 (1.56) 60.70 (17.41) 100.00 (0.00) 56.51 (0.95) 61.96 (14.64) 100.00 (0.00)
(
f = sin
? = ?/4
) 10 88.40 (1.80) 100.00 (0.00) 100.00 (0.00) 87.99 (1.91) 100.00 (0.00) 100.00 (0.00)
20 91.35 (1.72) 100.00 (0.00) 100.00 (0.00) 91.09 (2.05) 100.00 (0.00) 100.00 (0.00)
50 99.51 (0.10) 100.00 (0.00) 100.00 (0.00) 99.49 (0.20) 99.48 (3.68) 100.00 (0.00)
(
f = tanh
? = 0
) 10 51.77 (0.57) 48.40 (11.49) 100.00 (0.00) 51.86 (0.58) 50.44 (7.67) 100.00 (0.00)
20 53.09 (0.79) 48.40 (10.62) 100.00 (0.00) 53.27 (0.86) 50.52 (7.45) 100.00 (0.00)
50 56.25 (1.66) 61.90 (18.98) 100.00 (0.00) 56.39 (1.11) 63.88 (15.10) 100.00 (0.00)
(
f = tanh
? = ?/4
) 10 88.00 (2.13) 100.00 (0.00) 100.00 (0.00) 87.25 (3.62) 100.00 (0.00) 100.00 (0.00)
20 92.24 (1.50) 100.00 (0.00) 100.00 (0.00) 92.55 (1.53) 100.00 (0.00) 100.00 (0.00)
50 99.51 (0.11) 100.00 (0.00) 100.00 (0.00) 99.46 (0.14) 100.00 (0.00) 100.00 (0.00)
TABLE I: Results from ‘Sine vs. Squre Wave’ example. The entries represent the mean and standard deviation (in parenthesis)
classification accuracy over 50 trials. The training and testing classification accuracy are shown for two standard linearout
output weight approaches for ESNs, along with the proposed tensor-based classification method. Several parameters of N, ?, f
are included.
B. USPS Handwritten Digits
In this collection of experiments, classification is performed
on 16×16 grayscale images of handwritten digits. The dataset
is partitioned into 10 classes, representing digits ‘0’ through
‘9’. Some samples of these images are shown in Figure 4. The
images are treated as 16 × 16 spatiotemporal signals, with
y coordinates corresponding to the spatial dimension and x
coordinates corresponding to the temporal dimension.
Fig. 4: Sample digits from the USPS Handwritten Digits
dataset.
For the training dataset, 100 images from each class are
randomly selected, and paired with an indicator matrix y ?
R
10×100 where y(:, j) = ek if the input A
j belongs to the kth
class. The test set is formed similarly, but with a distinct 100
images from each class so the test set and training set have
no overlap in samples.
The ESN parameters used are N ? {10, 25, 50, 100},
f = tanh, ? = ?/4, and the modal ranks for the tensor-
based approach are J1 ? {5, 10, ?N/2?, ?3N/4?} and
J2 ? {4, 8, 12}. For each triplet (N, J1, J2), forty simulations
are performed with different randomizations in the training
and test set selections, as well as the ESN input and reservoir
weight matrices for each simulations. However, for each
simulation the same selections are used with each of the
classification methods.
For tensor-based classification, X ? RN×16×100, the tensor
of reservoir states of the training inputs, is decomposed via
Algorithm 1 into the form
X ? F ×1 U ×2 V
as in (8). Then a new input A from the test set with reservoir
states X is predicted to belong to the kth class using Equa-
tion (14), that is if
?X ×1 U
? × V ? ?F(:, :, j)?
is minimized for some training input Aj in the kth class.
For trained linear output weights-based classification, a
single output weight matrix Wout ? R
10×N is generated as in
Equation (6) for each simulation. Classification is performed
on the entire collection of reservoir states for each test input,
as in Equation (7).
The results of these simulations are presented in Figure 1.
Results using the HOOI Algorithm 1 are displayed in blue,
and results using linear output weights are shown in red. The
maximal mean accuracy over all pairs (J1, J2) are shown
for each N for the tensor-based approach. Note that the
tensor-based approach consistently yields higher classification
accuracy than the trained linear output weight approach.
Although the results are not competitive with state-of-the-art
on this particular dataset, they do show that the tensor-based
classification method yields higher results than standard ESN
techniques.
C. Japanese Vowels
In this collection of experiments, speaker identification is
performed using samples of audio recordings. The dataset con-
tains 640 samples of nine male speakers saying the Japanese
vowel ‘ae’. The data is split into 270 training samples of 30
utterances by each speaker, and 370 test samples of 24-88
utterances by each speaker. Each sample is an 14 ×m array
10 20 50 100 200
N
50
60
70
80
90
100
%
 C
la
ss
ifi
ca
tio
n 
A
cc
ur
ac
y
Testing (USPS)
10 20 50 100 200
N
50
60
70
80
90
100
%
 C
la
ss
ifi
ca
tio
n 
A
cc
ur
ac
y
Training (USPS)
Fig. 5: Average percent classification accuracy over 40 simulations for each N on the USPS dataset using the tensor-based
HOOI Algorithm (in blue) and the linear output weights method (in red). The vertical lines represent one standard deviation
from the mean.
of cepstrum coefficients, where m is the temporal length of
the sample, using 12 cepstrum coefficients and two bias terms.
The dataset, first appearing in [14] and obtained via [16], is
popular in machine learning and ESN literature [1], [8], [11],
[24], [27]. A test accuracy of 100% was reported in [11] using
an ensemble classifier of 1000 ESNs of four leaky-integrator
nodes.
In the examples below, we use a single ESN with
N = 4, 10, 20, or 50 nodes, a nonlinear activation function
f = sin and bias ? = ?/4. The classifiers are found using (6)
and Algorithm 1 with (8) from the collection of reservoir
states corresponding to the training inputs. The test inputs
are modified by adding Gaussian noise ? N(0, ?) with
? ? {0.00, 0.05, 0.10}. Classification is then performed on
the resulting reservoir states using (7) for trained linear output
weights or (14) for the tensor method. For each pair (N, ?),
20 simulations were performed with new randomizations of
Wres and Win for each simulation.
The test classification accuracy results are displayed in
Figure 6. In the figure, the blue lines correspond to the
tensor-based method, and the red lines correspond to the
linear output weight method. The individual lines within each
method correspond to different levels of noise added to the
test inputs. The x-axis is the number of reservoir nodes N .
The points on the lines give the mean accuracy over the 20
simulations, while the vertical lines represent one standard
deviation from the mean.
In the figure, classification accuracy initially decreases as
N increases, but eventually improve for large enough N . This
is consistent with results published in [24]. Both methods
degrade as the level of added noise increases, however the
tensor-based method consistently yielded better accuracy re-
sults. Not only does the tensor-based approach have higher
mean classification accuracy for all parameter choices, but the
standard deviation is smaller indicating that the results are less
sensitive to the randomizations in Wout and Win.
V. CONCLUSION
This work introduced a tensor-based method to perform
supervised classification on spatiotemporal data processed in
an ESN. The numerical experiments demonstrate that the
proposed method may outperform the traditional trained linear
output weights method in terms of classification accuracy.
Future directions include investigating other types of tensor
decompositions, including low rank polyadic and sparse de-
compositions, as well as using other types of non instance-
based classifiers on the resulting decompositions.
Acknowledgments
This work was cleared for public release by Wright Patterson
Air Force Base Public Affairs on 15 Aug 2017. Case Number:
88ABW-2017-3910.
Any opinions, findings and conclusions or recommendations
expressed in this material are those of the author and do not
necessarily reflect the view of the United States Air Force.
REFERENCES
[1] D. Barber. Dynamic Bayesian networks with deterministic latent tables.
In Proc. NIPS 2003, 2003.
[2] R. Bellman. Dynamic Programming. Princeton University Press,
Princeton, NJ, USA, 1 edition, 1957.
[3] K. Bush and C. Anderson. Modeling reward functions for incomplete
state representations via echo state networks. In 2005 IEEE International
Joint Conference on Neural Networks (IJCNN), 2005.
[4] A. Cichocki, D. P. Mandic, A. H. Phan, C. F. Caiafa, G. Zhou, Q. Zhao,
and L. De Lathauwer. Tensor decomopsitions for signal processing
applications: From two-way to multiway component analysis. IEEE
Signal Processing Magazine, 32(2):145–163, 2015.
[5] L. De Lathauwer, B. De Moor, and J. Vandewalle. On the best rank-
1 and rank-(R1, R2, . . . , RN ) approximation of higher-order tensors.
SIAM J. Matrix Anal. Appl., 21(4):1324–1342, 2000.
[6] A. Goudarzi, P. Banda, M. Lakin, C. Teuscher, and D. Stefanovic. A
comparitive study of reservoir computing for temporal signal processing.
Technical report, University of New Mexico, 2014.
[7] N. Goyal, S. Vempala, and Y. Xiao. Fourier PCA and robust tensor
decomposition. ACM, 2014.
[8] P. Guerts. Pattern extraction for time series classification. In Proc.
PKDD 2001, pages 115–127, 2001.
4 10 20 50
N
0
20
40
60
80
100
%
 C
la
ss
ifi
ca
tio
n 
A
cc
ur
ac
y
Testing Accuracy (JV)
HOOI
W
out
 = 0.00
 = 0.05
 = 0.10
Fig. 6: Percent classification test accuracy of the Japanese Vowel dataset. The results are plotted against N , the number of
nodes in the reservoir, for both classification methods for several amounts of noise added to the test sets. The points along
the lines represent the mean accuracy over 20 simulations, while the vertical lines represent one standard deviation from the
mean.
[9] H. Jaeger. The ‘echo state’ approach to analysing and training recurrent
neural networks - with an erratum note. Technical Report GMD Report
Number 148, Fraunhofer Institute for Autonomous Intelligent Systems,
2011.
[10] H. Jaeger. Long short-term memory in echo state networks: Details of a
simulation study. Technical Report 27, Jacobs University Bremen, 2012.
[11] H. Jaeger, M. Lukosevicius, D. Popovici, and U. Siewert. Optimization
and applications of echo state networks with leaky-integrator neurons.
Neural Networks, 20(3):335–352, 2007.
[12] T. G. Kolda and B. W. Bader. Tensor decompositions and applications.
51(3):455–500, 2009.
[13] P. Kroonenberg. Three-mode principal component analysis: Theory and
applicaitons. DSWO Press, 1983.
[14] M. Kudo, J. Toyama, and B. Li. Multidimensional curve classification
using passing-through regions. Pattern Recognition Letters, 20:11–13.
[15] Q. Li, A. Prater, L. Shen, and G. Tang. Overcomplete tensor decom-
position via convex optimization. In Computational Advances in Multi-
Sensor Adaptive Processing (CAMSAP), IEEE International Workshop
on, page 53, 2015.
[16] M. Lichman. Japanese vowels data set.
http://archive.ics.uci.edu/ml/datasets/Japanese+Vowels, Accessed:
July 2016.
[17] L.-H. Lim and P. Comon. Multiarray signal processing: Tensor de-
composition meets compressed sensing. Comptes Rendus Mecanique,
338(6):311–320, 2010.
[18] M. Lukos?evic?ius. A practical guide to applying echo state networks. In
G. Montavon and et al., editors, NN: Tricks of the Trade, pages 650–686.
Springer-Verlag Berlin Heidelberg, 2 edition, 2012.
[19] M. Lukos?evic?ius and H. Jaeger. Reservoir computing approaches to
recurrent neural network training. Comp. Sci. Rev., 3:127–149, 2009.
[20] W. Maass, H. Natschlager, and H. Markram. Real-time computing
without stable states: a new framework for neural computation based
on perturbations. Neural Comput., 14:2531–2560, 2002.
[21] Y. Paquot, F. Duport, A. Smerieri, J. Dambre, B. Schrauwen, M. Hael-
terman, and S. Massar. Optoelectronic reservoir computing. Sci. Rep.,
2, 2012.
[22] A. H. Phan and A. Cichocki. Tensor decompositions for feature
extraction and classification of high dimensional datasets. Nonlinear
theory and its applications, IEICE, 1(1):37–68, 2010.
[23] A. Prater. Comparison of echo state network output layer classification
methods on noisy data. In 2017 International Joint Conference on
Neural Networks (IJCNN), 2017.
[24] A. Prater. Spatiotemporal signal classification via principal components
of reservoir states. Neural Networks, 91:66–75, 2017.
[25] P. Shah, N. Rao, and G. Tang. Sparse and low-rank tensor decompo-
sition. In Advances in Neural Information Processing Systems (NIPS),
Proceedings of, 2015.
[26] M. D. Skowronski, H. Natschl ager, and H. Markram. Minimum mean
squared error time series classification using an echo state network
prediction model. In Proceedings of ICSAS, 2006.
[27] M. Strickert. Self-organizing neural networks for sequence processing.
PhD thesis, Univ. of Osnabru?ck, Department of Computer Science, 2004.
[28] I. Szita, V. Gyenes, and A. Lorincz. Reinforcement learning with echo
state networks. In ICANN, Part I LNCS, pages 830–839, 2006.
[29] L. R. Tucker. Some mathematical notes on three-mode factor analysis.
Psychometrika, 31(3):279–311, 1966.
[30] K. Vandoorne and et al. Toward optical signal processing using photonic
reservoir computing. Opt. Express, 16:11182–92, 2008.
[31] D. Verstraeten, B. Schrauwen, D. Stroobandt, and J. Van Capenhout.
Isolated word recognition with the liquid state machine: A case study.
Information Processing Letters: Special issue on applications of spiking
neural networks, 96:521–528, 2005.
[32] P. Werbos. Backpropagation through time: What it does and how to do
it. Proc. IEEE, 78:1550–1560, 1990.
[33] H. Zhang, X. Feng, B. Li, and et al. Integrated photonic reservoir
compuing based on hierarchical time-multiplexing structure. Opt.
Express, 22, 2014.
