Learning Combinations of Sigmoids
Through Gradient Estimation
Stratis Ioannidis
Dept. of Electrical and Computer Engineering
Northeastern University
Boston, MA, 02115
ioannidis@ece.neu.edu
Andrea Montanari
Dept. of Electrical Engineering and Dept. of Statistics
Stanford University
Stanford, CA 94304
montanari@stanford.edu
Abstract
We develop a new approach to learn the parameters of regression models with
hidden variables. In a nutshell, we estimate the gradient of the regression function
at a set of random points, and cluster the estimated gradients. The centers of the
clusters are used as estimates for the parameters of hidden units. We justify this
approach by studying a toy model, whereby the regression function is a linear
combination of sigmoids. We prove that indeed the estimated gradients concentrate
around the parameter vectors of the hidden units, and provide non-asymptotic
bounds on the number of required samples. To the best of our knowledge, no
comparable guarantees have been proven for linear combinations of sigmoids.
1 Introduction
Classification and regression models with hidden variables have a long history in statistical learning.
They naturally arise when learning mixtures, a topic recently receiving considerable attention [Cha-
ganty and Liang, 2013, Sun et al., 2014, Anandkumar et al., 2012, 2014, Hsu and Kakade, 2013].
Interest on such models has also increased because of the empirical success of deep neural networks
in image and speech processing tasks [Bengio, 2009, Krizhevsky et al., 2012, Hinton et al., 2012].
One of the most striking properties of these models is the ability to learn high-level representations
that are particularly useful for discriminative purposes [Boureau et al., 2008, Mairal et al., 2009,
Boureau et al., 2010, Yu et al., 2013, Humphrey et al., 2013]. This ability–often referred to as
‘feature learning’–is yet poorly understood. From a modeling point of view, it is unclear what are the
key elements of such high-level representations, and how are they captured (for instance) by deep
neural networks. From a computational point of view, the corresponding empirical risk minimization
problem is highly non-convex, and it is unclear why existing algorithms are empirically successful at
learning these representations.
In this work, we consider a regression model with response variable y ? R and covariates x ? Rd,
linked through the regression function:
E
{
y|x
}
? r(x) =
?k
`=1 u` f(?w`,x?) , (1)
where, w1, . . . ,wk ? Rd, u1, . . . , uk ? R, f : R ? R is the sigmoid f(x) = tanh(?x) =
e?x?e??x
e?x+e??x
, for some ? > 0, and ?a, b? =
?d
i=1 aibi is the usual scalar product in Rd. In the general
ar
X
iv
:1
70
8.
06
67
8v
1 
 [
st
at
.M
L
] 
 2
2 
A
ug
 2
01
7
case, the weights u`, ` ? [k] ? {1, . . . , k} have arbitrary signs, while in the mixture case, they are
positive and sum to one. Our objective is to learn the parameter vectors {w`}k`=1, particularly when
k  d; it is useful to pause for a few remarks on this model:
• In the general case, learning the parameter vectors {w`}k`=1 can be viewed as a simple model
for feature learning. In particular, (1) corresponds to a two-layer neural network with k hidden
units. The non-linear functions f(?w1, ·?), f(?w2, ·?), . . . , f(?wk, ·?), provide a high-level,
lower-dimensional representation of the data.
• In the mixture case, (1) is the expected label generated by a mixture of k logistic classifiers,
each selected with probability u`. Each vector w` is the normal to the separating hyperplane
defining each classifier; learning {w`}k`=1 thus corresponds to learning the mixture’s constituent
distributions. When k  d, the number of classifiers (or ‘modes’) is smaller than the ambient
dimension, as is the case in many applications [Sun et al., 2014, Yi et al., 2014, Chen et al., 2014].
• In both cases, once {w`}k`=1 are known, learning the full regression function is straightforward:
fitting {u`}k`=1 is a standard linear regression problem.
Our approach is based on a simple remark. The gradient of the regression function r at any ? ? Rd is
a linear combination of {w`}k`=1, with coefficients depending on ?, i.e.,?r(x) =
?k
`=1 c`(?)w
`
(see Section 3.2). Further, if ? is sufficiently far from the origin, this linear combination is typically
sparse: it contains at most one non-vanishing coefficient. Our algorithm thus proceeds in two steps:
(1) estimate the gradient ?r( · ) at m0 random positions ?1, . . . , ?m0 ; (2) cluster these estimates and
use cluster centers as estimates of {w`}k`=1.
Our main technical contribution is to prove that this approach is consistent: for largem0, the algorithm
generates gradient estimates that concentrate around w1, . . . , wk. We establish non-asymptotic
bounds on the minimum sample size that guarantees this clustering to take place. We do so under
three different methods for estimating ?r(·). Assuming access to a value oracle for r, we construct a
gradient estimator under which clustering succeeds with only ?(d) oracle calls. Assuming access to
covariates x sampled from a standard Gaussian distribution, we show that clustering succeeds with
access to e?(d) samples in the general case. A dimensionality reduction method by Sun et al. [2014]
allows us to reduce the complexity to ?(d) + e?(poly(k)) samples, in the mixture case (i.e., {u`}k`=1
positive and summing to one).
The rest of the paper is organized as follows. In Section 2, we review related work in the area.
Section 3 describes in detail the new algorithm. In Section 4 we state our main results. Finally, we
outline our proof in Section 5, with many technical details deferred to the appendix.
2 Related Work
Typical approaches to learning mixtures, like EM [Dempster et al., 1977] come with no guarantees,
and suffer from convergence to local minima. Providing guarantees for even the idealized case of
learning mixtures of Gaussians is non-trivial, and has been the subject of several recent studies [Moitra
and Valiant, 2010, Hsu and Kakade, 2013]. There are relatively few rigorous results that guarantee
learning for regression models with latent variables. Chaganty and Liang [2013] consider mixtures
of linear regressions. In this setting, they show that regressing the response from second and third
order tensors of the covariates yields coefficients, also higher order tensors, whose decomposition
reveals the model parameters. A different approach, relying only on the second-order tensor (i.e., the
covariance) and alternating minimization is followed by Yi et al. [2014] , for a mixture composed
of two linear models in the absence of noise; the same setting, in the presence of noise, is studied
by Chen et al. [2014]. None of these approaches can be applied to our model: our components are
non-linear (sigmoids), while the above works focus on linear components; moreover, both Yi et al.
[2014] and Chen et al. [2014] limit their analysis to k = 2 hidden units.
Sedghi and Anandkumar [2016] apply the moment method, as well as tensor factorization techniques,
to learn mixtures of sigmoids. Their contribution is not directly comparable to ours: they assume
the vectors w` are random, and require a special non-degeneracy condition on the expectations of
third derivatives of the hidden units. For instance, this condition is not satisfied by f(x) = tanh(?x)
if x has a symmetric distribution. Sun et al. [2014] consider the problem of learning a mixture of
linear classifiers, and provide guarantees for learning the subspace spanned by {w`}k`=1. This, in
2
turn, can be used for dimensionality reduction: projecting the covariates to this space reduces the
problem dimension from d to k. We focus on learning the parameter vectors, rather than their span;
our contribution is thus complementary to Sun et al. [2014]. In fact, we exploit their result to reduce
our algorithm’s complexity under Gaussian covariates.
Our approach can be cast as a means to learn the parameters of a two-stage neural network. Such
networks are known to be quite expressive [Barron, 1993], in that they can approximate arbitrary
polynomials. A recent result by Andoni et al. [2014] shows that, in the presence of a large number
of neurons with random parameter vectors, a polynomial can be learned through gradient descent.
Our contribution differs in two important directions: (i) we want to learn the hidden-unit parameter
vectors, rather than approximate a given regression function, and (ii) we develop explicit bounds on
the sample size, while Andoni et al. [2014] assume infinite sample size n =?. Namely, they assume
access to the gradient of the regression function: a substantial part of our technical work is devoted
to proving this can be sufficiently estimated. Arora et al. [2014] prove that certain very sparse deep
neural networks with random connection patterns can be learned in polynomial time and sample
complexity. In model (1), this would correspond to random, sparse vectors w`, {u`}k`=1. Their
techniques do not seem applicable to non-random connections or to non-sparse graphs. Finally, there
are several celebrated results on the sample complexity of approximating a function through a neural
network (see, e.g., Anthony and Bartlett [2009]). This is a different problem than the parameter
estimation problem we solve here. A formal understanding of parameter estimation is crucial in
understanding why neural nets learn low-dimensional representations well. Parameter estimation
also naturally arises in learning mixtures, where correctly identifying the constituent components (or,
modes) is of equal or greater importance than regressing the mixture function.
3 Modelling Assumptions and Learning Algorithm
3.1 Modeling Assumptions
Recall that we consider a regression model with response variable y ? R, generated through (1)
from covariates x ? Rd. Note that (1) is equivalent to y =
?k
`=1 u` f(?w`,x?) + ? , with ? a noise
term such that E{?|x} = 0. In the general case, we assume that for any ` ? [k] ? {1, . . . , k}, the
vectors w` have unit norm, i.e., ?w`?2 = 1, the absolute value of each weight is at most one, i.e.,
u` ? [?1, 1], and the response is bounded, i.e., y ? [?M,M ] for some M > 0. In the mixture case,
we assume in addition that u` ? 0, l ? [k], and
?k
`=1 u` = 1.
Clearly, we cannot learn a vector w` if u` = 0, nor distinguish two vectors w`,w`
?
, where ` 6= `?,
if they are identical. For this reason, we make the following two additional assumptions. First,
coefficients u` are bounded away from zero, i.e., there exists a u0 s.t. 0 < u0 ? |u`| < 1, for all
` ? [k]. Second, the collinearity between any subset of vectors w` is also bounded. Formally, let
M = [w1|w2| · · · |wk] ? Rd×k be the matrix comprising the vectors w` column-wise. We assume
that there exists a ? > 0 such that ? ? ?min(M), where ?min the smallest singular value of M .
Intuitively, the existence of ? implies a lower bound on the angle between any two vectors w`,w`
?
.
Our learning method relies on producing estimates of the gradient ?r(·) at arbitrary points in Rd.
We produce estimators of the gradient under two different models on our ability to sample function r:
• Value Oracle Model. Under our first model, we assume access to a value oracle: given a x ? Rd,
the oracle produces a y ? R governed by (1), while successive calls to the oracle are independent.
Put differently, we treat (1) as a ‘black box’, whose inputs are under our algorithm’s control.
• Gaussian Covariates Model. Under our second model, we assume that the covariates x follow
a standard Gaussian N(0, Id×d), while y is given by (1). Our learning algorithm has access to n
independent pairs (x(1), y(1)), . . . , (x(n), y(n)) generated from the above joint distribution, and
must construct gradient estimates?r(?) at different ? ? Rd from this dataset alone.
3.2 Intuition Behind our Approach
Consider the gradient of the expected response function r : Rd ? R, evaluated at a ? ? Rd:
?r(?) =
?k
`=1 u`f
?(?w`, ??) ·w` (2)
3
Observe that ?r(?) is a linear combination of the parameter vectors w`. Moreover, since f is a
sigmoid, lim|t|?? f ?(t) = 0. Thus, for any ? such that |?w`, ??|  1, the coefficient u`f ?(?w`, ??)
weighing the contribution of w` to the gradient?r(?) is small. As a result,w` contributes signifi-
cantly to the gradient?r(?) when it is approximately normal to ?, i.e., |?w`, ??| ? 0.
These observations motivate our approach. Presuming the existence of an estimator of the gradient,
our algorithm amounts to the following three steps:
1. Pick several ? ? Rd, and produce estimates of the gradient w(?) ? ?r(?).
2. If ?w(?)?2 is below a threshold w0, ignore this estimate. Otherwise, normalize it, producing
w?(?) = w(?)/?w(?)?2.
3. Identify k clusters among the resulting ‘candidate’ vectors w?(?), and report the centers of these
k clusters as the parameter vector estimates for {w`}k`=1.
If a w(?) has a high norm, then ? must be approximately normal to at least one vector in {w`}k`=1.
Moreover, if it is approximately normal to only one such vector, sayw1, by (2) the estimated gradient
w(?) will have a significant component in the direction of w1. As such, after renormalization,
all such vectors are indeed clustered around w1. Our formal guarantees, as stated by Theorem 1,
establish that most candidates indeed satisfy this property, with the exception of a small spurious set.
3.3 Gradient Estimation
The above approach crucially relies on estimating the response gradient?r(·) at an arbitrary ? ? Rd.
We discuss our estimation process for each of the two models below.
• Gradient Estimation in the Value Oracle Model. Under the Value Oracle model, given a
? ? Rd, we generate n0 i.i.d. pairs (x(i), y(i)) where each x(i) is sampled from N(?, Id×d), and
y(i) is the corresponding value returned by the oracle. The estimate w(?) of?r(?) is then:
w(?) = 1n0
?n0
i=1 x
(i)y(i). (3)
If m0 is the number of gradient estimates, the total number of oracle calls is n = m0 × n0.
• Gradient Estimation in the Gaussian Covariates Model. Given a ? ? Rd, we first compute the
‘barycenter’ of all covariates x(i) w.r.t. the exponential kernel K(?, ·) = exp
{
??, ·?
}
, namely,
x(?) =
?n
i=1 K(?,x
(i))x(i)?n
i=1 K(?,x
(i))
. Then, we compute the estimate w(?) of?r(?) as:
w(?) ?
?n
i=1K(?,x
(i)) y(i)
(
x(i) ? x(?)
)?n
i=1K(?,x
(i))
. (4)
Note that the same n covariate/label pairs {(x(i), y(i))}ni=1 are used in the computation of each
estimate w(?). This is in contrast to the Value Oracle model, where inputs to (1) are centered on ?.
Correctness. The estimates w(?) produced under either of the two models through (3) and (4),
respectively, capture the local slope of the regression function: both constitute asymptotically
unbiased estimates of E?[?r(X)], namely, the expectation of the gradient when X ? N(?, Id×d)
(c.f. Lemmas 5.1 and 5.2). However, our algorithm (Algoritm 1) is agnostic to how the gradient is
estimated. In principle as well as in practice, alternative approaches (like, e.g., using different kernels,
or regressing r(·) locally at ? through linear approximation) could be used instead.
3.4 Candidate Generation Algorithm
The entire candidate generation process is summarized in Algorithm 1. In short, we first produce of
m0 i.i.d. vectors ?, sampled from a common Gaussian distribution p? = N(0, ?20 Id), with covariance
proportional to the identity. For each such ?, we produce a gradient estimate w(?) using Eq. (3)
or (4). We ignore all estimates whose norm is below a threshold, namely ?w(?)?2 ? w0. Finally,
we normalize the remaining estimates, thus producing the final ‘candidate’ set w(?1), . . . , w(?m),
where m ? m0. Both ?0 as well as the threshold w0 are design parameters, which we specify below
in our convergence theorem (Theorem 1).
4
Algorithm 1 CANDIDATEGENERATION
`? 0
for i ? {1, 2, . . . ,m0} do
generate ? ? p?; computew(?) using Eq. (3) or Eq. (4)
if ?w(?)?2 ? w0 then
`? `+ 1; ?` ? ?; w?(?`)? w(?`)/?w(?`)?2
end if
end for
m? `; return m and {w?(?1), . . . , w?(?m)}
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0.5
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0.2
0.0
0.2
0.4
0.6
0.8
1.0
(a) (b) (c)
Figure 1: An execution of Algorithm 1 under the Gaussian Covariates model, for d = 3, n = m0 = 5000, the
standard basis as parameter vectors, and uniform weights, using ?0 = 2
?
d. The m pre-candidate vectorsw(?)
are shown in subfigure (a) as points. Subfigure (b) contains the top 50 vectors with highest norm, after they have
been normalized. These vectors are clustered using k-means in subfigure (c), and the resulting cluster centers
are indicated with thick arrows.
Fig. 1 illustrates an execution of Algorithm 1. The candidates generated are indeed close to the
parameter vectors, which are succesfully recovered through simple k-means over these candidates.
4 Main Results
4.1 Generic Combinations under Value Oracle and Gaussian Covariates Models
Our first result establishes that Algorithm 1 indeed produces candidates clustered around {w`}k`=1:
Theorem 1. Let {w?(?1), . . . , w?(?m)}, where m ? m0, be the output of the CANDIDATEGEN-
ERATION algorithm. Then, for any ? ? (0, 0.5], and any ? ? (0, 1), there exist w0 = ?
(
?u20
k
)
,
?0 = ?
(
k2
??? log
k
u0?
)
, ? = ?(??k2 ), for which the following occur with probability at least 1 ? ?:
the set of candidate indices C ? [m0] can be partitioned as C = C0 ? C1 ? · · · ? Ck so that if i ? C`
then
??w?(?i)?w`??
2
? 6? , and |C`| ? ?m0/2, for all ` ? [k], while C0 is a set of ‘bad’ candidates
such that |C0| ? 2??m0. This occurs for (a) m0 > C 1?? log
k
? , and (b) either n0 > C
? dM2
?2w20
log k??? ,
under the Value Oracle model, or n > M
4d2
?2w20
max
(
C ??
(
k
???
)1+7(1+2d?1)?20
, e4d(
1
7 +(1+2d
?1)?20)
)
,
under the Gaussian Covariates model, for some absolute constants C,C ?, C ??.
There are several observations to be made. First, the gradient estimation procedures outlined in 3.3
indeed yield sufficiently accurate estimates so that, asymptotically, the candidates w` concentrate
around the parameter vectors. On the other hand, there exists also a set of ‘bad’ candidates, that may
not necessarily be close to any parameter vector. However, this set can be made arbitrarily small
compared to the smallest set of ‘valid’ candidates: indeed, for any ? ? (0, 1), choosing m0 and n0 or
n as in the theorem yields |C0|/min` |C`| ? 4?. The spurious set C0 is unavoidable; beyond incorrect
estimates the gradient (occurring with low probability as n0 and n increases), if d > 2, there are also
?s that are approximately normal to more than one parameter vectors w`, ` ? [k]. Nonetheless, this
5
is significantly less likely than the event that ? is approximately normal to (and thus, estimating) only
one of the parameter vectors (c.f. Lemma 5.4).
In both gradient estimation models, a small (m0 = ?(log k)) number of ?s suffices to correctly
estimate the clusters. On the other hand, the sample complexity scales as n = m0 × n0 = ?(d log k)
in the Value Oracle model, and n = e?(d·poly(k)) in the Gaussian Covariates model. Nevertheless, in
the next section, we show that the exponential dependence on d can be avoided when k  d.
4.2 Gaussian Covariates with Dimensionality Reduction
We avoid the exponential dependence on d under Gaussian Covariates by preprocessing covariates
through a dimensionality reduction method. Observe that r(x) depends on x only through the k inner
products ?w`,x?, ` ? [k]. As a result, projecting a x(i) to the k-dimensional linear space spanned by
{w`}k`=1 and estimating the gradient would result in no loss of information. Most importantly, this
eliminates the dependence of the gradient estimation on d. Discovering the linear span of {w`}k`=1
can be performed using, e.g., the SPECTRALMIRROR method of Sun et al. [2014] in the mixture case:
Theorem 2 (Sun et al. [2014]). Given n covariate/label pairs generated through the Gaussian
Covariates model in the mixture case, the SPECTRALMIRROR Algorithm constructs an estimate M?
ofM = span(M) s.t., for all ? ? u0?, the largest principal angle dP betweenM and M? satisfies
P{dP (M,M?) > ?} ? C1e?C2
n?2
d . with C1, C2 absolute constants.
The above theorem is a special case of Theorem 1 of [Sun et al., 2014], when the covariates are
sampled from a standard (rather than arbitrary) Gaussian. In short, it implies that O( d?2 ) points
suffice to produce a linear space within a ? angle fromM = span(M). We leverage this result
to improve on the bound of Theorem 1 for Gaussian covariates. First, given n samples from the
Gaussian Covariates model, we use as subset of these samples to produce an estimate M? ofM
through the SPECTRALMIRROR algorithm. To estimate the gradient ?r(?) at ? ? Rd using the
remaining samples, we apply again (4) on the projections of x(i) to M?. More formally:
• Gradient Estimation with Projected Gaussian Covariates. Use n1 < n samples to produce
an estimate M? ofM. For every x ? Rd, denote by x? the projection of x to M?. Using the
remaining n2 = n? n1 samples, the estimate of?r(?) at ? ? Rs is given by:
w(?) ?
?n
i=n1+1
K(?, x?(i)) y(i)
(
x?(i) ? x?(?)
)?n
i=n1+1
K(?, x?(i))
, (5)
where K(?,x) = e??,x? and x?(?) ?
?n
i=n1+1
K(?,x?(i)) x?(i)?n
i=n1+1
K(?,x?(i))
.
Note that w(?) = w(??), i.e., the estimate depends on ? only through its projection to M?. The
estimation (5) replaces (4) in Algorithm 1, indeed eliminating the exponential dependence on d:
Theorem 3. Let {w?(?1), . . . , w?(?m)}, where m ? m0, be the output of the CANDIDATEGENER-
ATION algorithm when (5) is used to produce w(?) in the mixture case. Then, for any ? ? (0, 0.5],
and any ? ? (0, 1), there exist w0 = ?
(
?u20
k
)
, ?0 = ?
(
k2
??? log
k
u0?
)
, ? = ?(??k2 ), for which the
following occurs with probability at least 1? ?: the set of candidate indices C ? [m0], can be parti-
tioned as C = C0 ? C1 ? · · · ? Ck , so that if i ? C` then
??w?(?i)?w`??
2
? 7? , and |C`| ? ?m0/2,
for all ` ? [k], while C0 is a set of ‘bad’ candidates such that |C0| ? 2??m0. This occurs for
(a) m0 > C 1?? log
k
? , and (b) n1 > C
?d
(
min
{
2 arcsin
?
3?
8k , 2 arcsin
?2
4k , u0?
})?1
and n2 >
M4k2
?2w20
max
(
C ??
(
k
???
)1+7(1+2k?1)?20
, e4k(
1
7 +(1+2k
?1)?20)
)
, for absolute constants C,C ?, C ??.
Hence, n1 = ?(dk) suffices to estimateM, while n2 = e?(k
5 log2 k) suffices for gradient estimation.
6
5 Proof of Theorem 1
We prove Theorem 1 below. The proofs of all lemmas, as well as the proof of Theorem 3, can be
found in the appendix.
5.1 Concentration Results
We first establish some concentration results regarding gradient estimation through (3) and (4). For
? ? Rd, let E?{·} be the expectation with respect to a Gaussian random variable X ? N(?, Id×d)
centered at ?, and let:
w(?) = E?
{
?r(X)
}
=
?k
`=1 u`w
`E?
{
f ?
(
?w`,X?
)}
. (6)
Given ? ? Rd, (6) is the expectation of estimate w(?), under both (3) and (4): this is a consequence
of Stein’s lemma Stein [1973]. We also characterize the rate of convergence of w(?) to w(?):
Lemma 5.1 (Value Oracle Concentration Bound). There exist numerical constants c1, c2, c2, and c4
such that, when w(?) is computed through (3), for any fixed ? ? Rd:
P
{??w(?)?w(?)??
2
? ?
}
? c1 exp
(
?min
{c2n0?2
dM2
, (c3
?
n0?
M
? c4
?
d)2
})
. (7)
The proof of this lemma can be found in Appendix A, and relies on the sub-gaussianity of the r.v. yx,
when x is gaussian and y is given by (1). Similarly, under the Gaussian Covariates model:
Lemma 5.2 (Gaussian Covariates Concentration Bound). There exists a numerical constant C such
that, when w(?) is computed through (4), for any fixed ? ? Rd:
P
{??w(?)?w(?)??
2
? ?
}
? Ce
???22
n?2
M4(d+ ???2)2 . (8)
The proof of this lemma can also be found in Appendix A.
5.2 Characterizing Gradient Coefficients and Approximate Normality
Eq. (6) indicates that, asymptotically, w(?) is a linear combination of the vectors w`. The following
lemma, proved in Appendix B.1, bounds the coefficients of this linear combination:
Lemma 5.3. For any ` ? [k] and ? ? Rd,
??(?2?) e?2?|?w
`,??|+2?2 ? E?
{
f ?
(
?w`,X?
)}
? 8?e?2?|?w
`,??|+2?2 , (9)
where ?(x) =
? x
?? e
?z2/2dz/
?
2? is the one-dimensional Gaussian distribution function, and E?
is the expectation with respect to a Gaussian random variableX ? N(?, Id×d) centered at ?.
The lemma implies that a vector w` contributes significantly to w(?) only if z` = ?w`, ?? ' 0, and
? is approximately normal to w`. Thus, if ? is approximately normal to only one w`, w(?) ? w`.
Clearly, the success of the candidate generation process depends on the event that a randomly
generated ? is on approximately normal to a single parameter vector, but not two. The following
lemma, whose proof can be found in Appendix B.2, bounds the probabilities of these events:
Lemma 5.4. Assume that ? ? Rd is sampled from N(0, ?20 Id). Then, for any 0 < ? < ?0,
P(|?w`,??| < ?) ?
?
2
e?
?
?0
, for all ` ? [k] and for any ?1,?2 > 0, P(|?w`,??| <
?1, |?w`
?
,??| < ?2) ? 2?1?2???20 , for all `, `
? ? [k] with ` 6= `?.
5.3 Candidate Partitioning
We now describe how the m candidate indices C ? [m0] produced by Algorithm 1 can be partitioned
as C = C0 ? C1 ? · · · ? Ck , s.t. for any i ? C`, candidate w?(?(i)) is close to w`, while C0 is a small
7
set of spurious candidates. Let c1 = c1(?) ? ??(?2?)e2?
2
and c2 = c2(?) ? 8?e2?
2
, where ? as
in Lemma 5.3. Given ? ? (0, 0.5], and ? ? (0, 1), let
? =
1
?
log
(1 + ?)c2k
c1u0?
, (10)
and set the parameters of Algorithm 1 as follows
w0 ?
1
?
kc2e
?2?? =
c21u
2
0?
(1 + ?)2c2k
, (11)
?0 ? 2
?
2e
?
k
?
(
k
?
+ 1)? =
2
?
?
2e
?
k
?
(
k
?
+ 1) log
(1 + ?)c2k
c1u0?
, and (12)
? ?
?
1
2e?
?
?0
? 2k
??
(
?
?0
)2
=
??
4e(?+ ?)2
(13)
Note that our choice of ?0 is such that ??0 satisfies the equation:
2k2
??
(
?
?0
)2
= ? ·
(?
1
2e?
?
?0
? 2k
??
(
?
?0
)2)
= ??. (14)
We define the following partition of Rd = R0
?{?k
`=1R`
}
?R? ,:
R0 ?
{
? ? Rd : min
i?[k]
|?wi, ??| ? ?
}
, (15a)
R` ?
{
? ? Rd : |?w`, ??| < ?, min
i?[k]\`
|?wi, ??| ? ?
}
, (15b)
R? ?
{
? ? Rd : ?`1, `2 ? [k] : `1 6= `2, |?w`1 , ??| < ?, |?w`2 , ??| < ?
}
. (15c)
By (6) and (9), for ? ? R0, w(?) can be rewritten as w(?) = Mv, where ?v?2 ?
?
kc2e
?2??.
Hence, as ?M?2 ? ?M?F =
?
k, for any ? ? R0,
?w(?)?2 ? k c2 e?2??
(11)
= ?w0 . (16)
Similarly, the setsR` are such that for any ? ? R`
?w(?)? a`w`?2 ? k c2 e?2?? = ?w0 , (17)
where a` ? |u`| · E0
{
f ?
(
?w`, ? + X?
)}
. This follows from the same argument used above in
proving (16). Moreover, from Eq. (9):
c1u0e
?2?? ? |a`| = |u`| · E0
{
f ?
(
?w`, ? +X?
)}
? c2 . (18)
Armed with the above observations, we partition the set of generated ?’s as [m0] ? G ? Gc, where
G ?
{
j ? [m0] : ?w(?j) ? w(?j)?2 ? ?w0
}
. Recall that the candidate set is, by construction,
C ?
{
j ? [m0] : ?w(?j)?2 ? w0}. We define the partition of the candidate set, as described in
Theorem 1, as follows: for each ` ? [k], let C` ?
{
j ? G : ?j ? R`, ?w(?j)?2 ? w0
}
, and
C0 ?
{
j ? [m0] : ?w(?j)?2 ? w0 , j 6? ?k`=1C`
}
. Observe that this is indeed a partition of C.
The following lemma, whose proof can be found in Appendix C.1, establishes that candidates in
the sets C` have the desirable property stated in Thm. 1, namely, that they are clustered around the
corresponding vectors w`:
Lemma 5.5. For each ` ? [k] and each j ? C`,
??w?(?j)?w`??2 ? 6?.
To conclude the proof, we need to show that, w.h.p., the sets C` are large, while the spurious set C0 is
small. The next lemma upper-bounds the size of the spurious candidate set C0:
8
Lemma 5.6. The event |C0| ? 2??m0 occurs with probability at least (b) 1 ?
[
c1
?? exp
(
?
min
{ c2n0?2w20
dM2 , (c3
?
n0?w0
M ? c4
?
d)2
})
+ e?c5m0??
]
, with c1, . . . , c5 absolute constants, un-
der the Value Oracle model, and (b) 1 ?
(
c1
??
(
M4d2
n?2w20
) 1
1+4(1+2d?1)?20 + e?c2m0??
)
, for n >
M4d2
?2w20
e4d(
1
7 +(1+2d
?1)?20) and c1, c2 absolute constants, under the Gaussian Covariates model.
The proof can be found in Appendix C.2. The next lemma, whose proof is in Appendix C.3 lower-
bounds the size of sets C`:
Lemma 5.7. For ` ? [k], the event |C`| ? m0?/2 occurs with probability at least (a) 1?
[
c1
?? exp
(
?
min
{ c2n0?2w20
dM2 , (c3
?
n0?w0
M ?c4
?
d)2
})
+e?c5m0?
]
, where c1, . . . , c5 are absolute constants, under
the Value Oracle model, and (b) 1 ?
(
c1
??
(
M4d2
n?2w20
) 1
1+7(1+2d?1)?20 + e?c3m0?
)
, where c1, c2 are
absolute constants, for n > M
4d2
?2w20
e4d(
1
7 +(1+2d
?1)?20), under the Gaussian Covariates model.
Using the above three lemmas and by applying a union bound, we get that the events
in the theorem occur with probability at least 1 ? ? if m0 > C 1?? log
k
? and, for the
Value Oracle model, n0 > C ? dM
2
?2w20
log k??? , or, for the Gaussian Covariates model, n >
M4d2
?2w20
max
(
C ??
(
k
???
)1+7(1+2d?1)?20
, e4d(
1
7 +(1+2d
?1)?20)
)
, where C,C ?, and C ?? are absolute con-
stants.
References
A. Anandkumar, F. Huang, D. J. Hsu, and S. M. Kakade. Learning mixtures of tree graphical models.
In NIPS, 2012.
A. Anandkumar, R. Ge, D. Hsu, and S. M. Kakade. A tensor approach to learning mixed membership
community models. The Journal of Machine Learning Research, 15(1):2239–2312, 2014.
A. Andoni, R. Panigrahy, G. Valiant, and L. Zhang. Learning polynomials with neural networks. In
ICML, 2014.
M. Anthony and P. L. Bartlett. Neural Network Learning: Theoretical Foundations. Cambridge
University Press, 2009.
S. Arora, A. Bhaskara, R. Ge, and T. Ma. Provable bounds for learning some deep representations.
In ICML, 2014.
A. R. Barron. Universal approximation bounds for superpositions of a sigmoidal function. Information
Theory, IEEE Transactions on, 39(3):930–945, 1993.
Y. Bengio. Learning deep architectures for AI. Foundations and Trends in Machine Learning, 2(1):
1–127, 2009.
Y.-l. Boureau, Y. L. Cun, et al. Sparse feature learning for deep belief networks. In NIPS, 2008.
Y.-L. Boureau, F. Bach, Y. LeCun, and J. Ponce. Learning mid-level features for recognition. In
CVPR, 2010.
A. T. Chaganty and P. Liang. Spectral experts for estimating mixtures of linear regressions. In ICML,
2013.
Y. Chen, X. Yi, and C. Caramanis. A convex formulation for mixed regression with two components:
Minimax optimal rates. In COLT, 2014.
S. Dasgupta and A. Gupta. An elementary proof of a theorem of johnson and lindenstrauss. Random
Structures & Algorithms, 22(1):60–65, 2003.
9
A. P. Dempster, N. M. Laird, and D. B. Rubin. Maximum likelihood from incomplete data via the em
algorithm. Journal of the Royal Statistical Society. Series B (Methodological), pages 1–38, 1977.
G. Hinton, L. Deng, D. Yu, G. E. Dahl, A.-r. Mohamed, N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen,
T. N. Sainath, et al. Deep neural networks for acoustic modeling in speech recognition: The shared
views of four research groups. Signal Processing Magazine, IEEE, 29(6):82–97, 2012.
D. Hsu and S. M. Kakade. Learning mixtures of spherical Gaussians: moment methods and spectral
decompositions. In ITCS, 2013.
E. J. Humphrey, J. P. Bello, and Y. LeCun. Feature learning and deep architectures: new directions
for music informatics. Journal of Intelligent Information Systems, 41(3):461–481, 2013.
A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classification with deep convolutional neural
networks. In NIPS, 2012.
J. S. Liu. Siegel’s formula via Stein’s identities. Statistics & Probability Letters, 21(3):247–251,
1994.
J. Mairal, J. Ponce, G. Sapiro, A. Zisserman, and F. R. Bach. Supervised dictionary learning. In
NIPS, pages 1033–1040, 2009.
A. Moitra and G. Valiant. Settling the polynomial learnability of mixtures of gaussians. In Foundations
of Computer Science (FOCS), 2010 51st Annual IEEE Symposium on, pages 93–102. IEEE, 2010.
H. Sedghi and A. Anandkumar. Provable tensor methods for learning mixtures of classifiers. In
AISTATS, 2016.
C. M. Stein. Estimation of the mean of a multivariate normal distribution. In Prague Symposium on
Asymptotic Statistics, 1973.
Y. Sun, S. Ioannidis, and A. Montanari. Learning mixtures of linear classifiers. In ICML, 2014.
X. Yi, C. Caramanis, and S. Sanghavi. Alternating minimization for mixed linear regression. In
ICML, 2014.
D. Yu, M. L. Seltzer, J. Li, J.-T. Huang, and F. Seide. Feature learning in deep neural networks-studies
on speech recognition tasks. arXiv preprint arXiv:1301.3605, 2013.
A Proof of Concentration Results
A.1 Proof of Lemma 5.1
We use the following variant of Stein’s identity (see Stein [1973], and Liu [1994] for this specific
formulation). LetX ? Rd,X ? ? Rd? be jointly Gaussian random vectors, sampled from a Gaussian
distribution of arbitrary mean and covariance. Consider a function h : Rd? ? R that is almost
everywhere (a.e.) differentiable and satisfies E[|?h(X ?)/?xi|] < ?, for all i ? [d?]. Then, the
following identity holds:
Cov(X, h(X ?)) = Cov(X,X ?)E[?h(X ?)]. (19)
In the case of the Value Oracle model, Stein’s identity and (3) imply that:
Ew(x) = E?r(X)X = E?{?rX} ? w(?).
Thus, w(?) indeed concentrates around w(?) by the law of large numbers. The tail bounds in
Lemma 5.1 then follow from Lemma 1 of Sun et al. [2014].
10
A.2 Proof of Lemma 5.2
It is convenient to define the following quantities z(?) ?
?n
i=1K(?,x
(i)) , u(?) ??n
i=1K(?,x
(i))x(i) , s(?) ?
?n
i=1K(?,x
(i)) y(i) , and v(?) ?
?n
i=1K(?,x
(i)) y(i)x(i) . Note
that, in terms of these quantities, we have w(?) = v(?)z(?) ?
u(?) s(?)
z(?)2 . The following concentration
results then hold:
Lemma A.1. For any fixed ? ? Rd, let E?{· · · } denote the expectation with respect toX ? N(?, Id).
Then, if {x(i)}i=1,...,n are generated under the Gaussian covariates model, we have
E z(?) = n e???
2
2/2 , Eu(?) = n e???
2
2/2 E?X = n e???
2
2/2 ?, (20a)
E s(?) = n e???
2
2/2 E?r(X) , Ev(?) = n e???
2
2/2 E?
{
X r(X)
}
. (20b)
and
P
{??z(?)?E z(?)?? ? n?}? e2???22
n?2
,P
{??u(?)?Eu(?)??
2
? n?
}
? e
2???22(d+4???22)
n?2
, (21a)
P
{??s(?)?E s(?)?? ? n?}? e2???22M2
n?2
,P
{??v(?)?Ev(?)??
2
? n?
}
? e
2???22M2(d+4???22)
n?2
.
(21b)
Proof. We use the following two simple properties of Gaussian random variables. For g : Rd ? Rm,
we have that forX ? N(0, Id):
E0[e?
TXg(X)] = e???
2
2/2E?[g(X)] (22)
and
Cov[e?
TXg(X)] = e2???
2
2E2?[g(X)gT (X)]? e???
2
2E?[g(X)]E?[gT (X)] (23)
The statements in (20) therefore follow from (22) and the definition of the kernel K. By Chebyshev’s
inequality,
P
{??z(?)? E z(?)?? ? n?} ? Var{e?TX}
n?2
(23)
=
e2???
2
2 ? e???22
n?2
? e
2???22
n?2
.
Moreover, by Markov’s inequality:
P
{??u(?)? Eu(?)??
2
? n?
}
?
E
??u(?)? Eu(?)??2
2
n2?2
=
d?
j=1
Var{uj(?)}
n2?2
=
d?
j=1
Var{e?TXXj}
n?2
(23)
?
d?
j=1
e2???
2
2E2?[X2j ]
n?2
=
d?
j=1
e2???
2
2(1 + 4?2j )
n?2
=
e2???
2
2(d+ 4???22)
n?2
The first two inequalities in (21) therefore follow. The remaining two follow similarly using the fact
that the absolute values of the responses y are bounded by M .
An immediate consequence of Lemma A.1 is that w(?) concentrates around the following quantity:
Ev(?)
Ez(?)
? Eu(?)Es(?)(
Ez(?)
)2 = E?{X r(X)}? E?XE?r(X)
= Cov?[X, r(X)]
(19)
= E?[?r(X)] ? w(?).
Hence, (6) indeed describes the estimates, asymptotically. To prove (8), we use the following simple
auxiliary lemma.
Lemma A.2. For any a, a? ? Rd, b, b? > 0, and ? > 0, we have that:
If ?a? a?? ? ?? and |b? b?| ? ?? then
???a
b
? a?
b?
??? ? ?
where
?? =
b?2?
(?a??+ b?+ b??)
.
11
Proof. (Sketch) Note that ?? < b?. It is easy to show that
??a
b ?
a?
b?
?? ? (b?+?a??)??
(b????)b? = ?.
We have that
P
{??w(?)?w(?)??
2
> ?
}
?
P
{????v(?)z(?) ? Ev(?)Ez(?)
????
2
> ?/2
}
+ P
{????u(?)s(?)z(?)2 ? Eu(?)Es(?)(Ez(?))2
????
2
> ?/2
}
From Lemma A.2, for
?? =
(Ez(?))2?
2(?Ev(?)?2 + Ez(?) + Ez(?)?/2)
(20)
=
n e???
2
2/2
2?E?Xr(X)?2 + 2 + ?
?, (24)
we have
P
{????v(?)z(?) ? Ev(?)Ez(?)
????
2
> ?/2
}
? P
{
?v(?)? Ev(?)?2 > ??
}
+ P
{
|z(?)? Ez(?)| > ??
}
(21b),(21a),(24)
? M
2e2???
2
2(d+ 4???22)(2?E?Xr(X)?2 + 2 + ?)2
n?2e???
2
2
+
e2???
2
2(2?E?Xr(X)?2 + 2 + ?)2
n?2e???
2
2
=
(
M2(d+ 4???22) + 1
) (
2M
?
d+ ???22 + 2 + ?
)2
e???
2
2
n?2
,
where in the second to last step we use ?E?Xr(X)?22 ? E??Xr(X)?22, by the convexity of ? · ?22.
Similarly, for
??? =
(Ez(?))4?
2(?Eu(?)?2|Es(?)|+ (Ez(?))2 + (Ez(?))2?/2)
(20)
=
n2 e???
2
2
2?E?X?2|E?r(X)|+ 2 + ?
?, (25)
we have
P
{????u(?)s(?)z(?)2 ? Eu(?)Es(?)(Ez(?))2
????
2
> ?/2
}
? P
{
?u(?)s(?)? Eu(?)Es(?)?2 > ?
??
}
+ P
{ ??(z(?))2 ? (Ez(?))2?? > ???}
Rewriting terms and applying a union bound gives
P
{
?u(?)s(?)? Eu(?)Es(?)?2 > ?
??
}
? P
{
?Eu(?) (s(?)? Es(?))?2 > ?
??/3
}
+ (26)
P
{
?Es(?) (u(?)? Eu(?))?2 > ?
??/3
}
+ P
{
?(s(?)? Es(?)) (u(?)? Eu(?))?2 > ?
??/3
}
where
P
{
?Eu(?) (s(?)? Es(?))?2 > ?
??/3
}
= P
{
|s(?)? Es(?)| > ?
??
3 ?Eu(?)?2
}
(25),(20a)
= P
{
|s(?)? Es(?)| > ne
???22/2?
3 ???2 (2?E?X?2|E?r(X)|+ 2 + ?)
}
(21b)
?
9e???
2
2M2 ???22 (2?E?X?2|E?r(X)|+ 2 + ?)2
n?2
?
9e???
2
2M2 ???22 (2M???2 + 2 + ?)2
n?2
,
P
{
?Es(?) (u(?)? Eu(?))?2 > ?
??/3
}
= P
{
?u(?)? Eu(?)?2 >
???
3 |Es(?)|
}
(25),(20b)
= P
{
?u(?)? Eu(?)|2 >
ne???
2
2/2?
3|E?r(X)|(2?E?X?2|E?r(X)|+ 2 + ?)
}
(21a)
? 9e
???22(d+ 4???22)M2(2M???2 + 2 + ?)2
n?2
,
12
and
P
{
?(s(?)? Es(?)) (u(?)? Eu(?))?2 > ?
??/3
}
? P
{
|s(?)? Es(?)? >
?
???/3
}
+ P
{
?u(?)? Eu(?)?2 >
?
???/3
}
(21),(25)
? 3e
???22(M2 + d+ 4???22)(2M???2 + 2 + ?)
n?
.
Finally, using a similar union bound as in (26) we get:
P
{ ??(z(?))2 ? (Ez(?))2?? > ???} = P{ ??(z(?)? Ez(?))2 + 2Ez(?)(z(?)? Ez(?))?? > ???}
? P
{
|z(?)? Ez(?)| >
?
???
2
}
+ P
{
|z(?)? Ez(?)| > ?
??
4Ez(?)
}
(21),(25)
? 2e
???22(2M???2 + 2 + ?)
n?
+
16e???
2
2(2M???2 + 2 + ?)2
n?2
Adding the above bounds yields
P
{??w(?)?w(?)??
2
? ?
}
? e
???22
n?2
[
(10M2d+ 49M2???22 + 17)(2M
?
d+ ???22 + 2 + ?)2
]
+
+
e???
2
2
n?
[(2M2 + 3d+ 12???22 + 2)(2M???2 + 2 + ?)] (27)
and the lemma follows.
B Gradient Coefficients and Approximate Normality
B.1 Proof of Lemma 5.3
Observe that for f(x) = tanh(?x) we have:
?e?2?|x| < f ?(x) =
4?e?2?|x|
(1 + e?2?|x|)2
? 4?e?2?|x|. (28)
Observe also thatX ? ?w`,X? is a 1-dimensional zero-mean Gaussian r.v. with variance ?wi?22 = 1.
Using the upper bound in Eq. (28), we get
E0
{
f ?
(
?w`, ? +X?
)}
= E
{
f ?(z` +X)
}
? 4?E
{
e?2?|z`+X|
} (a)
? 8?E
{
e?2?(|z`|+X)I(X ? ?|z`|)
}
? 8? e?2?|z`|E{e?2?X} = 8? e?2?|z`|+2?
2
,
where in (a) we used E{e2?(|z`|+X)I(X ? ?|zi|)} ? E{e?2?(|z`|+X)I(X ? ?|z`|)}. This proves
the upper bound. Similarly, the lower bound on f ? yields:
E
{
f ?(z` +X)
}
? ?E
{
e?2?|z`+X|
}
? ?E
{
e?2?(|z`|+X)I(X ? ?|z`|)
}
(b)
= ?e?2?|z`|+2?
2
E?2?I(X ? ?|z`|) = ?e?2?|z`|+2?
2
P(X ? ?|z`|+ 2?) ,
where the equality (b) follows from the Gaussian integration formula (22) (with E?2? denoting
expectation with respect to X ? N(?2?, 1)).
B.2 Proof of Lemma 5.4
The first statement of the Lemma follows by observing that ?w`,??/?0 is a standard Gaussian. To
prove the second statement, we establish an auxiliary result:
Lemma B.1. Let (Z1, Z2) ? R2 be a zero-mean Gaussian random variable with covariance ? =
?2 [ 1 cc 1 ], for some |c| < 1. Then P(|Z1| < 1, |Z2| < 2) ?
212
??2
?
1?c2 .
13
Proof. Observe that Z = ?1/2W , where W is a standard Gaussian. Hence, P(|Z1| < , |Z2| < ) =
P(W ? R) ? |R|2? , where R the parallelogram defined by the endpoints ?
?1/2 [±1
±2
]
. The area
|R| is given by the determinant of the matrix comprising the two vectors definingR; as such, it is
|R| = det
(
??1/2
[
21 0
0 22
])
= (412)(det(?))
?1/2 = 412
?2
?
1?c2 .
Observe that ?w`,?? and ?w`? ,?? are jointly Gaussian with zero mean and covariance ? = ?20 [ 1 cc 1 ],
with c = ?w`,w`??. Hence, the second statement follows by Lemma B.1, as the latter implies:
P(|?w`,??| < ?1, |?w`
?
,??| < ?2) ?
2?1?2
??20
?
1? ?w`,w`??2
, for all ` 6= `? in [k].
Recall thatM is the d× k matrix whose columns comprise all vectors w`, ` ? [k], and letM ``? be
the d×2 matrix comprising only vectorsw` andw`? . Notice thatMT``?M ``? is a principal submatrix
ofMTM . Hence, by the Cauchy interlacing theorem,
?min(M
T
``?M ``?) ? ?min(M
TM) = (?min(M))
2 ? ?2.
On the other hand, 1 ? ?w`,w`??2 = det(MT``?M ``?) ? ?min(M
T
``?M ``?); the last inequality
follows from the fact that the trace ofMT``?M ``? is 2 and, thus, at least one of its eigenvalues is at
least 1. Hence, the second statement of the lemma follows.
C Proofs of Lemmas Bounding the Size of Each Partition
C.1 Proof of Lemma 5.5
Note that
??w?(?j)?w`??2 = ??? w(?j)?w(?j)?2 ?w`???2 ? ??? w(?j)?w(?j)?2 ? w(?j)?w(?j)?2 ???2 +??? w(?j)?w(?j)?2 ?w`???2 (a)?
2? + 2?1??
(b)
? 6?. Here, the first term in bound (a) follows from??? w(?j)?w(?j)?2 ? w(?j)?w(?j)?2
???
2
?
?w(?j)?w(?j)?2
?w(?j)?2
+ ?w(?j)?2
?? 1
?w(?j)|2
? 1
?w(?j)?2
??
=
?w(?j)?w(?j)?2
?w(?j)?2
?
|?w(?j)?2 ? ?w(?j)?2|
?w(?j)?2
? 2?
as for j ? C`, we have ?w(?j)?2 ? w0 and since C` ? G, we have |?w(?j)?2 ? ?w(?j)?2| ?
?w(?j) ?w(?j)?2 ? ?w0. The second term in bound (a) follows from (17). Indeed, since ?j ?
R`,
??? w(?j)?w(?j)?2 ? w`???2 ? ?w(?j)?a`w`?2?w(?j)?2 ? |a`??w(?j)?|?w(?j)?2 (17)? 2?w0?w(?j)?2 . On the other hand, since
|?w(?j)?2 ? ?w(?j)?2| ? ?w0 and ?w(?j)?2 ? w0, we have that ?w(?j)?2 ? (1? ?)w0, so the
second bound of (a) holds. Finally, (b) follows from ? ? (0, 0.5].
C.2 Proof of Lemma 5.6
We have
C0 ? Gc ? B0 ? B? , (29)
B0 ?
{
j ? G : ?j ? R0, ?w(?j)?2 ? (1? ?)w0
}
, (30)
B? ?
{
j ? G : ?j ? R?, ?w(?j)?2 ? (1? ?)w0
}
, (31)
since, for j ? G, the event j 6? ?k`=1C` implies ?k ? R0 ? R?. Further ?w(?j)?2 ? w0 implies
?w(?j)?2 ? (1? ?)w0 because –by definition of G– ?w(?j)?w(?j)?2 ? ?w0.
From Eq. (29), |C0| ? |Gc| + |B0| + B?|. Note that B0 = ? by construction, due to Eq. (16).
On the other hand, B? ? B?? ?
{
j ? [m0] : ?j ? R?
}
. Thus |B??| is a binomial random
14
variable with m0 trials and success probability P
(
?1 ? R?
) (a)
? 2k
2
??
(
?
?0
)2 (b)
= ??, where (a) is
implied by Lemma 5.4 and (b) is by construction of ?0 and ?—c.f. (12) and (13). Hence, for any
 ? 2e? 1, we get the Chernoff bound P (|B?| ? m0??(1 + )) ? e?
2m0??/4. Hence, we have that
P
(
|C0| > 2m0??) ? P
(
|Gc| ? m0??2
)
+ P
(
|B?| ? m0?? 32
)
? P
(
|Gc| ? m0??2
)
+ e?m0??/16.
To obtain the two statements in the lemma, it therefore remains to bound size of Gc. By Markov’s
inequality
P
(
|Gc| ? m0?
)
? E{|G
c|}
m0?
=
1
?
P
(
?w(?1)?w(?1)?2 > ?w0
)
Thus, under the Value Oracle model, (7) in Lemma 5.1 directly gives:
P
(
|Gc| ? m0?
)
? c1
?
exp
(
?min
{c2n0?2w20
dM2
, (c3
?
n0?w0
M
? c4
?
d)2
})
(32)
the first statement immediately follows.
To prove the second statement, assume that the Gaussian Covariates model, and (4), is used to produce
w(?) instead. Note that
P
(
|Gc| ? m0?
)
? 1
?
(
P
(
?w(?1)?w(?1)?2 > ?w0 | ??1?22 ? ??20
)
+ P(??1?22 > ??20)
)
(a)
? 1
?
[
C
n?2w20
M4
(
e??
2
0 (d+ ??20)
2
)
+ P(??1?22 > ??20)
]
(b)
? CM
4d2
n?2w20?
{
e(1+2d
?1)??20
}
+
1
?
P(??1?22 > ??20)
where C is a numerical constant, (a) follows from Corollary 5.2 and, in (b), we used (1 + x) ? ex.
On the other hand, the square of the norm of a standard Gaussian follows a chi-squared distribution,
so by Dasgupta and Gupta [2003], for ? > d we get that: P(??1?22 > ??20) ?
(
?
d e
1??d
) d
2 =
e?
d
2 (
?
d?1?log
?
d ). Note that log x/x is increasing in (0, e] and decreasing in [e,+?). Hence, for
all x > 0, log x ? xe and, thus, P(??1?
2
2 > ??
2
0) ? e?
d
2 (
e?1
e
?
d?1) ? e? e?14e ? ? e?7 for all ?
such that ?d ? 4 >
2e
e?1 . Hence, under this condition on ?, we have that P
(
|Gc| ? m0?
)
?
CM4d2
n?2w20?
e(1+2d
?1)??20 + 1?e
?
7 This means that by setting ? = 11
7 +(1+2d
?1)?20
log
n?2w20
M4d2 > 4d we get
that, for C an absolute constant:
P
(
|Gc| ? m0?
)
? C
?
(
M4d2
n?2w20
) 1
1+7(1+2d?1)?20
. (33)
and the second statement follows.
C.3 Proof of Lemma 5.7
We bound the size of C` as follows:
|C`| ? |C?`| ? |Gc| ,
where C?` ?
{
j ? [m0] : ?j ? R?`, ?w(?j)?2 ? w0
}
and R?` ?
{
? ? Rd : |?w`, ??| <
?
2 , mini?[k]\` |?w
i, ??| ? ?
}
. We only need to lower bound |C?`|, as |Gc| can be upper-bounded
by (32) or (33), under the Value Oracle and Gaussian Covariates model, respectively. Observe first
that, for any ?j ? R?`, as in (17), we have that ?w(?)? ? |a`| ? ?w0 where |a`| ? c1u0e?2?
?
2 .
On the other hand, for ? satisfying (10) we get that c1u0e?2?
?
2 = (1 + ?)w0. Hence, ?j ? R?` ?
?w(?j)?2 ? w0. Moreover, since ? < ?0 by (12), Lemma 5.4 implies that |C?`| a binomial random
variable with success probability P
(
?1 ? R?`
)
?
?
2
e?
?
2?0
? k 2??
(
?
?0
)2
= ?. Hence, for any
 ? (0, 1], we have P (|C?`| ? m0?(1? )) ? e?
2
2 m0? .
15
D Proof of Theorem 3
LetM = span(M), and M? the estimate ofM, suppose that the largest principal angle between the
two spaces satisfies
dp(M,M?) ? ? ?
?
2
.
Then, there exist orthonormal bases {e`}k`=1 , {e?`}k`=1 ofM, M?, respectively so that
?e`, e?`? ? cos ?, for all ` ? {1, . . . , k}. (34)
Note that (34) immediately implies that
?e` ? e?`?2 ? 2 sin
?
2
, for all ` ? {1, . . . , k}. (35)
Denote by P, P? ? Rd×k the matrices comprising the above orthonormal bases as columns. The
projections toM,M? can then be written as
PM(x) = PP
>x, and PM?(x) = P? P?
>x.
The following lemma holds:
Lemma D.1. For all w ?M with ?w?2 = 1 and all x ? Rd,
?w,x? ? ?PM?(w), PM?(x)? = ?w,x? ? ?P?
>w, P?>x? = ?d,x?
where ?d?2 ? 4k sin ?2 . In particular, for all unit-norm w,w
? ?M,
|?w,w?? ? ?PM?(w), PM?(w
?)?| = |?w,w?? ? ?P?>w, P?>w??| ? 4k sin ?
2
.
Proof. Since w ?M,
?w,x? = ?PP>w, PP>w? = ?P>w, P>w?
as P>P = I . On the other hand, we have that:
?P>w, P>x? = ?P?>w, P?>x? ? ?P?>w, (P?> ? P>)x? ? ?(P?> ? P>)w, P>x?
= ?P?>w, P?>x?+ ?d,x?
where d ? R1×d is a vector with ?d?2 ? (?P??2 + ?P?2)?P? ? P?2?w?2 = 2
?
k · 2
?
k sin ?2 · 1.
The lemma follows again as P?>P? = I .
Corollary D.2. For any w ?M s.t. ?w?2 = 1, ?w ? PM?(w)?2 ? 2
?
k sin ?2 .
Proof. From Lemma D.1 we have that ?w?22 ? ?PM?(w)?22 = |?w?22 ? ?PM?(w)?22| ? 4k sin
?
2 ,
where the first equality holds because projections are contractions. Hence
?w ? PM?(w)?
2
2 = ?w?22 + ?PM?(w)?
2
2 ? 2?w, PM?(w)? = ?w?
2
2 ? ?PM?(w)?
2
2 ? 4k sin
?
2
.
For every x ? Rd, denote by x? the projection of x to M?, i.e.,
x? = PM?(x) = P? P?
>x.
Then, the following holds:
Lemma D.3 (Concentration Bound under Dimensionality Reduction). There exists a numerical
constant C such that, when w(?) is computed through (5), for any fixed ? ? Rd:
P
{??w(?)? w?(?)??
2
? ?
}
? Ce
????22
n?2
M4(k + ????2)2 . (36)
where
w?(?) = P? P?>E??
{
?r(X)
}
=
?k
`=1 u`w?
`E??
{
f ?
(
?w`,X?
)}
, (37)
for E? denoting the expectation w.r.t.X ? N(?, Id×d).
16
The proof follows, mutatis mutandis, the same steps as the proof of Lemma 5.2, so we ommit it for
brevity. The next lemma is the equivalent of Lemma 5.4, for the case where ? is first projected to M?.
Lemma D.4. Assume that ? ? Rd is sampled from N(0, ?20 Id). Then, for any 0 < ? < ?0,
P(|?w`, ???| < ?) ?
?
2
e?
?
?0
, for all ` ? [k] and for any ?1,?2 > 0, P(|?w`, ???| <
?1, |?w`
?
, ???| < ?2) ? 2?1?2
??20
?
?2?
(
4k sin ?2
)2 , for all ` 6= `? in [k], where ? ? ?min(M).
Proof. The first statement can be shown as in Lemma 5.4 using the fact that ?w`, ??? = ?w?`,??, and
that ?w?`?2 ? 1, as PM? is a contraction. Similarly, to prove the second statement, we have that, for
all i, j ? [k],
P(|?w`, ???| < ?1, |?w`
?
, ???| < ?2) = P(|?w?`,??| < ?1, |?w?`
?
,??| < ?2) ?
2?1?2
??20
?
1? ?w?`, w?`??2
where the last inequality follows from Lemma B.1. On the other hand, by Lemma D.1:
1? ?w?`, w?`
?
?2 ? 1? ?w`,w`
?
?2 ? (2k sin ?
2
)2,
and the lemma follows as 1? ?w`,w`?2 ? ?2.
We can now describe how the candidate indices C ? [m0] produced by Algorithm 1 can be partitioned
as C = C0 ? C1 ? · · · ? Ck , s.t. for any i ? C`, candidate w?(?(i)) is close to w`, while C0 is a small
set of spurious candidates.
Given ? ? (0, 0.5], and ? ? (0, 1), we take ?, w0 as in (10) and (11), respectively. We take also ?0
and ? as in (12) and (13), with the only difference that ? is replaced by
?? =
?
?2 ?
(
4k sin
?
2
)2
(38)
Then, for sets R0, R`, ` ? [k], and R? defined as in (15), we can again show that, instead of (16)
and (17), we have that
?w?(?)?2 ? k c2 e?2??
(11)
= ?w0, for all ? ? R0,
while
?w?(?)? a`w?`?2 ? k c2 e?2?? = ?w0, for all ? ? R`.
The following lemmas can thus be proved using the same steps as in Section 5.3, using the bounds in
Lemma D.3 rather than the bounds in Lemma 5.2.
Lemma D.5. For each ` ? [k] and each j ? C`,
??w?(?j)? w?`??2 ? 6?.
Lemma D.6. The event |C0| ? 2??m0 occurs with probability at least 1 ?(
c1
??
(
M4k2
n?2w20
) 1
1+4(1+2k?1)?20 + e?c2m0??
)
, for n > M
4k2
?2w20
e4k(
1
7 +(1+2k
?1)?20) and c1, c2 abso-
lute constants.
Lemma D.7. For ` ? [k], the event that |C`| ? m0?/2, occurs with probability at least
1 ?
(
c1
??
(
M4k2
n?2w20
) 1
1+7(1+2k?1)?20 + e?c3m0?
)
, where c1, c2 are absolute constants, for n >
M4k2
?2w20
e4k(
1
7 +(1+2k
?1)?20)
Let ?? be such that the following inequalities hold
4k sin
??
2
?
?
3
4
?, 2
?
k sin
??
2
? ?, ?? ? u0?.
Note that these are satisfied for
?? = min
{
2 arcsin
?
3?
8k
, 2 arcsin
?2
4k
, u0?
}
.
17
Note that, if an estimate of M s.t. the largest principal angle between M and M? is ??, then by
Corollary D.2:
?w` ? w?`? ? ?, for all ` ? [k],
and
?? =
?
?2 ?
(
4k sin
??
2
)2 ? ?
2
.
Putting everything together, by Theorem 2, if
n1 > c
d
(??)
2
samples are used to estimate the subspace,
n2 >
M4k2
?2w20
max
(
C ??
(
k
???
)1+7(1+2k?1)?20
, e4k(
1
7 +(1+2k
?1)?20)
)
are used in the gradient estimation, and
m0 > C
1
??
log
k
?
samples are used in the candidate generation, then with probability at least 1? ? the set of candidate
indices C ? [m0], can be partitioned as
C = C0 ? C1 ? · · · ? Ck ,
where for any ` ? {1, 2, . . . , k}, if i ? C` then??w?(?i)?w`??
2
? 7? ,
while C0 is a set of ‘bad’ candidates, such that |C0| ? 2??m0, and |C`| ? ?m0/2 for all ` ? [k].
18
