Combining Discrete and Neural Features for
Sequence Labeling
Jie Yang, Zhiyang Teng, Meishan Zhang, and Yue Zhang?
Singapore University of Technology and Design
{jie_yang,zhiyang_teng}@mymail.sutd.edu.sg
{meishan_zhang,yue_zhang}@sutd.edu.sg
Abstract. Neural network models have recently1 received heated re-
search attention in the natural language processing community. Com-
pared with traditional models with discrete features, neural models have
two main advantages. First, they take low-dimensional, real-valued em-
bedding vectors as inputs, which can be trained over large raw data,
thereby addressing the issue of feature sparsity in discrete models. Sec-
ond, deep neural networks can be used to automatically combine input
features, and including non-local features that capture semantic patterns
that cannot be expressed using discrete indicator features. As a result,
neural network models have achieved competitive accuracies compared
with the best discrete models for a range of NLP tasks.
On the other hand, manual feature templates have been carefully investi-
gated for most NLP tasks over decades and typically cover the most use-
ful indicator pattern for solving the problems. Such information can be
complementary the features automatically induced from neural networks,
and therefore combining discrete and neural features can potentially lead
to better accuracy compared with models that leverage discrete or neural
features only.
In this paper, we systematically investigate the effect of discrete and neu-
ral feature combination for a range of fundamental NLP tasks based on
sequence labeling, including word segmentation, POS tagging and named
entity recognition for Chinese and English, respectively. Our results on
standard benchmarks show that state-of-the-art neural models can give
accuracies comparable to the best discrete models in the literature for
most tasks and combing discrete and neural features unanimously yield
better results.
Keywords: Discrete Features, Neural Features, LSTM
1 Introduction
There has been a surge of interest in neural methods for natural language pro-
cessing over the past few years. Neural models have been explored for a wide
? Corresponding author
1 This paper was accepted by International Conference on Intelligent Text Processing
and Computational Linguistics (CICLing) 2016, April; Konya, Turkey.
ar
X
iv
:1
70
8.
07
27
9v
1 
 [
cs
.C
L
] 
 2
4 
A
ug
 2
01
7
2 Combining Discrete and Neural Features for Sequence Labeling
range of tasks, including parsing [1,2,3,4,5,6,7], machine translation [8,9,10,11,12,13],
sentiment analysis [14,15,16,17,18] and information extraction [19,20,21,22], achiev-
ing results competitive to the best discrete models.
Compared with discrete models with manual indicator features, the main
advantage of neural networks is two-fold. First, neural network models take
low-dimensional dense embeddings [23,24,25] as inputs, which can be trained
from large-scale test, thereby overcoming the issue of sparsity. Second, non-linear
neural layers can be used for combining features automatically, which saves the
expense of feature engineering. The resulting neural features can capture complex
non-local syntactic and semantic information, which discrete indicator features
can hardly encode.
On the other hand, discrete manual features have been studied over decades
for many NLP tasks, and effective feature templates have been well-established
for them. This source of information can be complementary to automatic neu-
ral features, and therefore a combination of the two feature sources can led to
improved accuracies. In fact, some previous work has attempted on the combi-
nation. Turian et al. [26] integrated word embedding as real-word features into a
discrete Conditional Random Field [27] (CRF) model, finding enhanced results
for a number of sequence labeling tasks. Guo et al. [28] show that the integra-
tion can be improved if the embedding features are carefully discretized. On the
reverse direction, Ma et al. [29] treated a discrete perception model as a neural
layer, which is integrated into a neural model. Wang & Manning [30] integrated
a discrete CRF model and a neural CRF model by combining their output lay-
ers. Greg & Dan [6] and Zhang et al. [18] also followed this method. Zhang &
Zhang [31] compared various integration methods for parsing, and found that
the second type of integration gives better results.
We follow Zhang & Zhang [31], investigating the effect of feature combination
for a range of sequence labeling tasks, including word segmentation, Part-Of-
Speech (POS) tagging and named entity recognition (NER) for Chinese and
English, respectively. For discrete features, we adopt a CRF model with state-
of-the art features for each specific task. For neural features, we adopt a neural
CRF model, using a separated Long Short-Term Memory [32] (LSTM) layer to
extract input features. We take standard benchmark datasets for each task. For
all the tasks, both the discrete model and the neural model give accuracies that
are comparable to the state-of-the-art. A combination of discrete and neural
feature, gives significantly improved results with no exception.
The main contributions that we make in this investigation include:
- We systematically investigate the effect of discrete and neural feature com-
bination for a range of fundamental NLP tasks, showing that the two types of
feature are complimentary.
- We systematically report results of a state-of-the-art neural network se-
quence labeling model on the NLP tasks, which can be useful as reference to
future work.
- We report the best results in the literatures for a number of classic NLP
tasks by exploiting neural feature integration.
Combining Discrete and Neural Features for Sequence Labeling 3
- The source code of the LSTM and CRF implementations of this paper
are released under GPL at https://github.com/SUTDNLP/NNSegmentation,
../NNPOSTagging and ../NNNamedEntity .
2 Related Work
There has been two main kinds of methods for word segmentation. Xue [33]
treat it as a sequence labeling task, using B(egin)/I(nternal) /E(nding)/S(ingle-
character word) tags on each character in the input to indicate its segmentation
status. The method was followed by Peng et al. [34], who use CRF to improve the
accuracies. Most subsequent work follows [34,35,36,37,38] and feature engineer-
ing has been out of the key research questions. This kind of research is commonly
referred to as the character-based method. Recently, neural networks have been
applied to character-based segmentation [39,40,41], giving results comparable to
discrete methods. On the other hand, the second kind of work studies word-
based segmentation, scoring outputs based on word features directly [42,43,44].
We focus on the character-based method, which is a typical sequence labeling
problem.
POS-tagging has been investigated as a classic sequence labeling problem
[45,46,47], for which a well-established set of features are used. These handcrafted
features basically include words, the context of words, word morphologies and
word shapes. Various neural network models have also been used for this task. In
order to include word morphology and word shape knowledge, a convolutional
neural network (CNN) for automatically learning character-level representations
is investigated in [48]. Collobert et al. [25] built a CNN neural network for multi-
ple sequence labeling tasks, which gives state-of-the-art POS results. Recurrent
neural network models have also been used for this task [49,50]. Huang et al.
[50] combines bidirectional LSTM with a CRF layer, their model is robust and
has less dependence on word embedding.
Named entity recognition is also a classical sequence labeling task in the NLP
community. Similar to other tasks, most works access NER problem through fea-
ture engineering. McCallum & Li [51] use CRF model for NER task and exploit
Web lexicon as feature enhancement. Chieu & Ng [52], Krishnan & Manning
[53] and Che et al. [54] tackle this task through non-local features [55]. Besides,
many neural models, which are free from handcrafted features, have been pro-
posed in recent years. In Collobert et al. [25] model we referred before, NER
task has also been included. Santos et al. [56] boost the neural model by adding
character embedding on Collobert’s structure. James et al. [57] take the lead by
employing LSTM for NER tasks. Chiu et al. [58] use CNN model to extract char-
acter embedding and attach it with word embedding and afterwards feed them
into Bi-directional LSTM model. Through adding lexicon features, Chiu’s NER
system get state-of-the-art performance on both CoNLL2003 and OntoNotes 5.0
NER datasets.
4 Combining Discrete and Neural Features for Sequence Labeling
?" ?#$" ?# ?#%" ?&
?" ?#$" ?# ?#%" ?&
?(?, ?#)?(?,?#$") ?(?,?#%") ?(?,?&)?(?,?")
	  ?(?, ?#, ?#$") 	  ?(?, ?#%",?#) 	  ?(?, ?&,?&$")	  ?(?, ?.,?")
(a) Discrete Model Structure
?" ?"#$?"%$?"%& ?"#&
Bi-­?
LSTM
Bi-­?
LSTM
Bi-­?
LSTM
????	  ????
?????	  ????
??????	  ????: 5
?" ?"#$?"%$
?" ?"#$?"%$
?(?,?"%$) ?(?, ?") ?(?,?"#$)
	  ?(?, ?", ?"%$) 	  ?(?, ?"#$,?")
Bi-­?
LSTM
Bi-­?
LSTM
?"#&?"%&
?(?,?"%&) ?(?,?"#&)
?"%& ?"#&
	  ?(?, ?"%$,?"%&) 	  ?(?, ?"#&,?"#$)
(b) Neural Model Structure
Fig. 1. Model Structures
3 Method
The structures of our discrete and neural models are shown in Fig. 1(a) and
1(b), respectively, which are used for all the tasks in this paper. Black and white
elements represent binary features for discrete model and gray elements are
continuous representation for word/character embedding. The only difference
between different tasks are the definition of input and out sequences, and the
features used.
The discrete model is a standard CRF model. Given a sequence of input
x = x1, x2, . . . , xn, it models the output sequence y = y1, y2, . . . , yn by calculat-
ing two potentials. In particular, the output clique potential shows the correlation
between inputs and output labels,
?(x, yi) = exp(?o · fo(x, yi)) (1)
where fo(x, yi) is a feature vector extracted from x and yi, and ?o is a parameter
vector.
Combining Discrete and Neural Features for Sequence Labeling 5
The edge clique potential shows the correlation between consecutive output
labels,
?(x, yi, yi?1) = exp(?e · fe(x, yi, yi?1)) (2)
where fe(x, yi, yi?1) is a feature vector extracted from x, yi and yi?1, and ?e is
a parameter vector.
The final probability of y is estimated as
p(y|x) =
?|y|
i=1 ?(x, yi)
?|y|
j=1 ?(x, yj , yj?1)
Z(x)
(3)
where Z(x) is the partition function,
Z(x) =
?
y
|y|?
i=1
?(x, yi)
|y|?
j=1
?(x, yj , yj?1) (4)
The overall features {fo(x, yi), fe(x, yi, yi?1)} are extracted at each location
i according to a set of feature templates for each task.
The neural model takes the neural CRF structure. Compared with the
discrete model, it replaces the output clique features fo(x, yi)) with a dense
neural feature vector hi, which is computed using neural network layer,
hi = BiLSTM((e(xi?2), e(xi?1),e(xi), e(xi+1), e(xi+2)),W , b,hi?1)
?(x, yi) = exp(?o · hi)
(5)
where e(xi) is the embedding form of xi, BiLSTM represents bi-directional
LSTM structure for calculating hidden state hi for input xi, which considers both
the left-to-right and right-to-left information flow in a sequence. The BiLSTM
structure receives input of the embeddings from a window of size 5 as shown in
Fig. 1(b).
For the neural model, the edge clique is replaced with a single transition
weight ?(yi, yi?1). The remainder of the model is the same as the discrete model
p(y|x) =
?|y|
i=1 ?(x, yi)
?|y|
j=1 ?(x, yj , yj?1)
Z(x)
=
?|y|
i=1 exp(?o · hi)
?|y|
j=1 exp(?(yj , yj?1))
Z(x)
(6)
Here ?o and ?(yi, yi?1) are model parameters, which are different from the
discrete model.
The joint model makes a concatenation of the discrete and neural features
at the output cliques and edge cliques,
?(x, yi) = exp(?o · (hi ? fo(x, yi)))
?(x, yj , yj?1) = exp(?e · ([?(yj , yj?1)]? fe(x, yj , yj?1)))
(7)
6 Combining Discrete and Neural Features for Sequence Labeling
where the ? operator is the vector concatenation operation.
The training objective for all the models is to maximize the margin be-
tween gold-standard and model prediction scores. Given a set of training exam-
ples {xn,yn)}Nn=1, the objective function is defined as follows
L =
1
N
N?
n=1
loss(xn,yn,?) +
?
2
||?||2 (8)
Here ? is the set of model parameters ?o, ?e, W , b and ? , and ? is the L2
regularization parameter.
The loss function is defined as
loss(xn,yn,?) = max
y
(p(y|xn;?) + ?(y,yn))? p(yn|xn,?) (9)
where ?(y,yn) denotes the hamming distance between y and yn.
Online Adagrad [59] is used to train the model, with the initial learning rate
set to be ?. Since the loss function is not differentiable, a subgradient is used,
which is estimated as
?loss(xn,yn,?)
??
=
?p(y?|xn,?)
??
? ?p(yn|xn,?)
??
(10)
where y? is the predicted label sequence.
Chinese Word Segmentation Features. Table 1 shows the features used
in Chinese word segmentation. For “type”, each character has five possibilities:
0/Punctuation, 1/Alphabet, 2/Date, 3/Number and 4/others.
Table 1. Feature Templates for Chinese Word Segmentation
1 character unigram: ci ,?2 ? i ? 2
2 character bigram: ci?1ci ,?1 ? i ? 2; c?1c1 and c0c2
3 whether two characters are equal or not: c0 == c?2 and c0 == c1
4 character trigram: c?1c0c1
5 character type unigram: type(c0)
6 character types: type(c?1)type(c0)type(c1)
7 character types: type(c?2)type(c?1)type(c0)type(c1)type(c2)
POS Tagging Features. Table 2 lists features for POS tagging task on
both English and Chinese datasets. The prefix and suffix include 5 characters
for English and 3 characters for Chinese.
NER Features. Table 3 shows the feature template used in English NER
task. For “word shape”, each character in word is located in one of these four
types: number, lower-case English character, upper-case English character and
others. “Connect” word has five categories: “of”, “and”, “for”, “-” and other.
Table 4 presents the features used in Chinese NER task. We extend the features
used in Che et al. [54] by adding part-of-speech information. Both POS tag on
Combining Discrete and Neural Features for Sequence Labeling 7
Table 2. Feature Templates for POS tagging
1 word unigram: wi,?2 ? i ? 2
2 word bigram: w?1w0, w0w1, w?1w1
3 prefix: Prefix(w0)
4 suffix: Suffix(w0)
5 length: Length(w0) (only for Chinese)
Table 3. Feature Templates for English NER
1 word unigram: wi,?1 ? i ? 1
2 word bigram: wiwi+1,?2 ? i ? 1
3 word shape unigram: Shape(wi),?1 ? i ? 1
4 word shape bigram: Shape(wi)Shape(wi+1),?1 ? i ? 0
5 word capital unigram: Capital(wi),?1 ? i ? 1
6 word capital with word: Capital(wi)wj ,?1 ? i, j ? 1
7 connect word unigram: Connect(wi),?1 ? i ? 1
8 capital with connect: Capital(wi)Connect(w0),?1 ? i ? 1
9 word cluster unigram: Cluster(wi),?1 ? i ? 1
10 word cluster bigram: Cluster(wi)Cluster(wi+1,?1 ? i ? 0)
11 word prefix: Prefix(wi), 0 ? i ? 1
12 word suffix: Suffix(wi),?1 ? i ? 0
13 word POS unigram: POS(w0)
14 word POS bigram: POS(wi)POS(wi+1),?1 ? i ? 0
15 word POS trigram: POS(w?1)POS(w0)POS(w1)
16 POS with word: POS(w0)w0
Table 4. Feature Templates for Chinese NER
1 word POS unigram: POS(w0)
2 word POS bigram: POS(wi)POS(wi+1),?1 ? i ? 0
3 word POS trigram: POS(w?1)POS(w0)POS(w1)
4 POS with word: POS(w0)w0
6 word unigram: wi,?1 ? i ? 1
7 word bigram: wi?1wi, 0 ? i ? 1
8 word prefix: Prefix(wi),?1 ? i ? 0
9 word prefix: Suffix(wi),?1 ? i ? 0
10 radical: radical(w0, k), 0 ? k ? 4; k is character position
11 word cluster unigram: Cluster(w0)
English and Chinese datasets are labeled by ZPar [60], prefix and suffix on two
datasets are both including 4 characters. Word clusters in both English and
Chinese tasks are same with Che’s work [54].
4 Experiments
We conduct our experiments on different sequence labeling tasks, including Chi-
nese word segmentation, Part-of-speech tagging and Named entity recognition.
8 Combining Discrete and Neural Features for Sequence Labeling
Table 5. Hyper Parameters
Parameter Value
dropout probability 0.25
wordHiddensize 100
charHiddensize 60
charEmbSize 30
wordEmbSize 50
wordEmbFineTune True
charEmbFineTune True
initial ? 0.01
regularization ? 1e-8
For these three tasks, their input embeddings are different. For Chinese word
segmentation, we take both character embeddings and character bigram embed-
dings for calculating e(xi). For POS tagging, e(xi) consists of word embeddings
and character embeddings. For NER, we include word embeddings, character
embeddings and POS embeddings for e(xi). Character embeddings, charac-
ter bigram embeddings and word embeddings are pretrained separately using
word2vec[23]. English word embedding is chosen as SENNA [25]. We make use
of Chinese Gigaword Fifth Edition1 to pretrain necessary embeddings for Chi-
nese words. The Chinese corpus is segmented by ZPar [60]. During training, all
these aforementioned embeddings will be fine-tuned. The hyper-parameters in
our experiments are shown at Table 5. Dropout [61] technology has been used
to suppress over-fitting in the input layer.
4.1 Chinese Word Segmentation
For Chinese word segmentation, we choose PKU, MSR and CTB60 as evaluation
datasets. The PKU and MSR dataset are obtained from SIGHAN Bakeoff 2005
corpus3. We split the PKU and MSR datasets in the same way as Chen et al.
[62], and the CTB60 set as Zhang et al. [63]. Table 6 shows the statistical results
for these three datasets. We evaluate segmentation accuracy by Precision (P),
Recall (R) and F-measure (F).
Table 6. Chinese Word Segmentation Datasets Statistics
Segmentation datasets
PKU MSR CTB60
(sentences)
Train 17149 78226 23401
Dev 1905 8692 2078
Test 1944 3985 2795
1 https://catalog.ldc.upenn.edu/LDC2011T13
3 http://www.sighan.org/bakeoff2005
Combining Discrete and Neural Features for Sequence Labeling 9
The experiment results of Chinese word segmentation is shown in Table 7.
Our joint models shown comparable results to the state-of-the-art results re-
ported by Zhang & Clark [42], where they adopt a word-based perceptron model
with carefully designed discrete features. Compared with both discrete and neu-
ral models, our joint models can achieve best results among all three datasets.
In particular, the joint model can outperform the baseline discrete model by
0.43, 0.42 and 0.37 on PKU, MSR, CTB60 respectively. In order to investigate
whether the discrete model and neural model can benefit from each other, we
scatter sentence-level segmentation accuracy of two models for three datasets in
Fig. 2. As we can see from Fig. 2, some sentences can obtain higher accuracies in
the neural model, while other sentences can win out in the discrete model. This
common phenomenon among three datasets suggests that the neural model and
the discrete model can be combined together to enjoy the merits from each side.
Table 7. Chinese Word Segmentation Results
Model
PKU MSR CTB60
P R F P R F P R F
Discrete 95.42 94.56 94.99 96.94 96.61 96.78 95.43 95.16 95.29
Neural 94.29 94.56 94.42 96.79 97.54 97.17 94.48 95.01 94.75
Joint 95.74 95.12 95.42 97.01 97.39 97.20 95.68 95.64 95.66
State-of-the-art N/A N/A 94.50 N/A N/A 97.20 N/A N/A 95.05
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(a) CTB
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(b) MSR
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(c) PKU
Fig. 2. Chinese Word Segmentation F-measure Comparisons
4.2 POS Tagging
We compare our models on both English and Chinese datasets for the POS
tagging task. The English dataset is chosen following Toutanova et al. [64] and
Chinese dataset by Li et al. [65] on CTB. Statistical results are shown in Table
8. Toutanova’s model [64] exploits bidirectional dependency networks to capture
10 Combining Discrete and Neural Features for Sequence Labeling
both preceding and following tag contexts for English POS tagging task. Li et
al. [65] utilize heterogeneous datasets for Chinese POS tagging through bundling
two sets of tags and training in enlarged dataset, their system got state-of-the-art
accuracy on CTB corpus.
Both the discrete and neural models get comparable accuracies with state-of-
the-art system on English and Chinese datasets. The joint model has significant
enhancement compared with separated model, especially in Chinese POS tagging
task, with 1% accuracy increment. Fig. 3 shows the accuracy comparison for the
discrete and neural models based on each sentence. There are many sentences
that are not located at the diagonal line, which indicates the two models gives
different results and have the potential for combination. Our joint model outper-
forms state-of-the-art accuracy with 0.23% and 0.97% on English and Chinese
datasets, respectively.
Table 8. POS Tagging Datasets Statistics
POS tagging datasets
English Chinese
(sentences)
Train 38219 16091
Dev 5527 803
Test 5462 1910
Table 9. POS Tagging Results
Model
English Chinese
Acc Acc
Discrete 97.23 93.97
Neural 97.28 94.02
Joint 97.47 95.07
State-of-the-art 97.24 94.10
4.3 NER
For the NER task, we split Ontonotes 4.0 following Che et al. [54] to get
both English and Chinese datasets. Table 10 shows the sentence numbers of
train/develop/test datasets.
We follow Che et al. [54] on choosing both the English and the Chinese
datasets. Their work induces bilingual constrains from parallel dataset which
gives significant enhancement of F-scores on both English and Chinese datasets.
Our discrete and neural models show comparable recall values compared
with Che’s results [54] on both datasets. Similar with the previous two tasks,
the joint model gives significant enhancement compared with separated models
Combining Discrete and Neural Features for Sequence Labeling 11
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(a) English
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(b) Chinese
Fig. 3. POS Tagging Accuracy Comparisons
Table 10. NER Datasets Statistics
NER datasets
English Chinese
(sentences)
Train 39262 15724
Dev 6249 4301
Test 6452 4346
Table 11. NER Results
Model
English Chinese
P R F P R F
Discrete 80.14 79.29 79.71 72.67 73.92 73.29
Neural 77.25 80.19 78.69 65.59 71.84 68.57
Joint 81.90 83.26 82.57 72.98 80.15 76.40
State-of-the-art 81.94 78.35 80.10 77.71 72.51 75.02
(discrete/neural) on all metrics. This shows that discrete and neural model can
identify entities using different indicator features, and they can be complemen-
tary with each other. The comparison of sentence F-measures in Fig. 4 confirms
this observation.
The joint model outperforms the state-of-the-art on both datasets in the two
different languages. The precision of joint models are less than state-of-the-art
system. This may be caused by the bilingual constrains in baseline system, which
ensures the precision of entity recognition.
5 Conclusion
We proposed a joint sequence labeling model that combines neural features and
discrete indicator features which can integrate the advantages of carefully de-
signed feature templates over decades and automatically induced features from
12 Combining Discrete and Neural Features for Sequence Labeling
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(a) English
0.7 0.8 0.9 1.0
discrete
0.7
0.8
0.9
1.0
n
e
u
ra
l
(b) Chinese
Fig. 4. NER F-measure Comparisons
neural networks. Through experiments on various sequence labeling tasks, in-
cluding Chinese word segmentation, POS tagging and named entity recognition
for Chinese and English respectively, we demonstrate that our joint model can
unanimously outperform models which only contain discrete features or neu-
ral features and state-of-the-art systems on all compared tasks.The accuracy/F-
measure distribution comparison for discrete and neural model also indicate that
discrete and neural model can reveal different related information, this explains
why combined model can outperform separate models.
In the future, we will investigate the effect of our joint model on more NLP
tasks, such as parsing and machine translation.
Acknowledgments
We would like to thank the anonymous reviewers for their detailed comments.
This work is supported by the Singapore Ministry of Education (MOE) AcRF
Tier 2 grant T2MOE201301.
Combining Discrete and Neural Features for Sequence Labeling 13
References
1. Richard Socher, Cliff C Lin, Chris Manning, and Andrew Y Ng. Parsing natural
scenes and natural language with recursive neural networks. In ICML, pages 129–
136, 2011.
2. Danqi Chen and Christopher D Manning. A fast and accurate dependency parser
using neural networks. In EMNLP, volume 1, pages 740–750, 2014.
3. David Weiss, Chris Alberti, Michael Collins, and Slav Petrov. Structured training
for neural network transition-based parsing. ACL-IJCNLP, pages 323–333, 2015.
4. Chris Dyer, Miguel Ballesteros, Wang Ling, Austin Matthews, and Noah A Smith.
Transition-based dependency parsing with stack long short-term memory. ACL-
IJCNLP, pages 334–343, 2015.
5. Hao Zhou, Yue Zhang, and Jiajun Chen. A neural probabilistic structured-
prediction model for transition-based dependency parsing. In ACL, pages 1213–
1222, 2015.
6. Greg Durrett and Dan Klein. Neural crf parsing. ACL-IJCNLP, pages 302–312,
2015.
7. Miguel Ballesteros and Xavier Carreras. Transition-based spinal parsing. CoNLL,
2015.
8. Nal Kalchbrenner and Phil Blunsom. Recurrent continuous translation models. In
EMNLP, pages 1700–1709, 2013.
9. Kyunghyun Cho, Bart Van Merrie?nboer, Caglar Gulcehre, Dzmitry Bahdanau,
Fethi Bougares, Holger Schwenk, and Yoshua Bengio. Learning phrase representa-
tions using rnn encoder-decoder for statistical machine translation. arXiv preprint
arXiv:1406.1078, 2014.
10. Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning
with neural networks. In NIPS, pages 3104–3112, 2014.
11. Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine trans-
lation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473,
2015.
12. Wang Ling, Isabel Trancoso, Chris Dyer, and Alan W Black. Character-based
neural machine translation. arXiv preprint arXiv:1511.04586, 2015.
13. Se?bastien Jean, Kyunghyun Cho, Roland Memisevic, and Yoshua Bengio. On using
very large target vocabulary for neural machine translation. ACL-IJCNLP, pages
1–10, 2015.
14. Richard Socher, Alex Perelygin, Jean Y Wu, Jason Chuang, Christopher D Man-
ning, Andrew Y Ng, and Christopher Potts. Recursive deep models for semantic
compositionality over a sentiment treebank. In EMNLP, volume 1631, page 1642,
2013.
15. Duyu Tang, Furu Wei, Nan Yang, Ming Zhou, Ting Liu, and Bing Qin. Learning
sentiment-specific word embedding for twitter sentiment classification. In ACL,
volume 1, pages 1555–1565, 2014.
16. C?cero Nogueira dos Santos and Ma?ra Gatti. Deep convolutional neural networks
for sentiment analysis of short texts. In COLING, 2014.
17. Duy-Tin Vo and Yue Zhang. Target-dependent twitter sentiment classification
with rich automatic features. In IJCAI, pages 1347–1353, 2015.
18. Meishan Zhang, Yue Zhang, and Duy-Tin Vo. Neural networks for open domain
targeted sentiment. In EMNLP, 2015.
19. Richard Socher, Danqi Chen, Christopher D Manning, and Andrew Ng. Reasoning
with neural tensor networks for knowledge base completion. In NIPS, pages 926–
934, 2013.
14 Combining Discrete and Neural Features for Sequence Labeling
20. Mengqiu Wang and Christopher D Manning. Effect of non-linear deep architecture
in sequence labeling. In IJCNLP, 2013.
21. Xiao Ding, Yue Zhang, Ting Liu, and Junwen Duan. Deep learning for event-driven
stock prediction. In ICJAI, pages 2327–2333, 2015.
22. Granroth-Wilding Mark and Clark Stephen. What happens next? event prediction
using a compositional neural network. AAAI, 2016.
23. Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation
of word representations in vector space. arXiv preprint arXiv:1301.3781, 2013.
24. Jeffrey Pennington, Richard Socher, and Christopher D Manning. Glove: Global
vectors for word representation. EMNLP, 12:1532–1543, 2014.
25. Ronan Collobert, Jason Weston, Le?on Bottou, Michael Karlen, Koray
Kavukcuoglu, and Pavel Kuksa. Natural language processing (almost) from
scratch. JMLR, 12:2493–2537, 2011.
26. Joseph Turian, Lev Ratinov, and Yoshua Bengio. Word representations: a simple
and general method for semi-supervised learning. In ACL, pages 384–394, 2010.
27. John Lafferty, Andrew McCallum, and Fernando CN Pereira. Conditional random
fields: Probabilistic models for segmenting and labeling sequence data. 2001.
28. Jiang Guo, Wanxiang Che, Haifeng Wang, and Ting Liu. Revisiting embedding
features for simple semi-supervised learning. In EMNLP, pages 110–120, 2014.
29. Ji Ma, Yue Zhang, and Jingbo Zhu. Tagging the web: Building a robust web tagger
with neural network. In ACL, volume 1, pages 144–154, 2014.
30. Mengqiu Wang and Christopher D Manning. Learning a product of experts with
elitist lasso. In IJCNLP, 2013.
31. Meishan Zhang and Yue Zhang. Combining discrete and continuous features for
deterministic transition-based dependency parsing. EMNLP, pages 1316–1321,
2015.
32. Sepp Hochreiter and Ju?rgen Schmidhuber. Long short-term memory. Neural com-
putation, 9(8):1735–1780, 1997.
33. Nianwen Xue et al. Chinese word segmentation as character tagging. Computa-
tional Linguistics and Chinese Language Processing, 8(1):29–48, 2003.
34. Fuchun Peng, Fangfang Feng, and Andrew McCallum. Chinese segmentation and
new word detection using conditional random fields. In Coling, page 562, 2004.
35. Hai Zhao. Character-level dependencies in chinese: usefulness and learning. In
EACL, pages 879–887, 2009.
36. Wenbin Jiang, Liang Huang, Qun Liu, and Yajuan Lu?. A cascaded linear model
for joint chinese word segmentation and part-of-speech tagging. In ACL, 2008.
37. Weiwei Sun. A stacked sub-word model for joint chinese word segmentation and
part-of-speech tagging. In HLT-ACL, pages 1385–1394, 2011.
38. Yijia Liu, Yue Zhang, Wanxiang Che, Ting Liu, and Fan Wu. Domain adaptation
for crf-based chinese word segmentation using free annotations. In EMNLP, pages
864–874, 2014.
39. Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. Deep learning for chinese word
segmentation and pos tagging. In EMNLP, pages 647–657, 2013.
40. Wenzhe Pei, Tao Ge, and Chang Baobao. Maxmargin tensor neural network for
chinese word segmentation. In ACL, 2014.
41. Xinchi Chen, Xipeng Qiu, Chenxi Zhu, and Xuanjing Huang. Gated recursive
neural network for chinese word segmentation. In EMNLP, 2015.
42. Yue Zhang and Stephen Clark. Chinese segmentation with a word-based perceptron
algorithm. In ACL, volume 45, page 840, 2007.
43. Weiwei Sun. Word-based and character-based word segmentation models: Com-
parison and combination. In Coling, pages 1211–1219, 2010.
Combining Discrete and Neural Features for Sequence Labeling 15
44. Yang Liu and Yue Zhang. Unsupervised domain adaptation for joint segmentation
and pos-tagging. In COLING (Posters), pages 745–754, 2012.
45. Adwait Ratnaparkhi et al. A maximum entropy model for part-of-speech tagging.
In EMNLP, volume 1, pages 133–142, 1996.
46. Michael Collins. Discriminative training methods for hidden markov models: The-
ory and experiments with perceptron algorithms. In EMNLP, pages 1–8, 2002.
47. Christopher D Manning. Part-of-speech tagging from 97% to 100%: is it time for
some linguistics? In Computational Linguistics and Intelligent Text Processing,
pages 171–189. Springer, 2011.
48. Cicero D Santos and Bianca Zadrozny. Learning character-level representations
for part-of-speech tagging. In ICML, pages 1818–1826, 2014.
49. Juan Antonio Perez-Ortiz and Mikel L Forcada. Part-of-speech tagging with re-
current neural networks. Universitat d’Alacant, Spain, 2001.
50. Zhiheng Huang, Wei Xu, and Kai Yu. Bidirectional lstm-crf models for sequence
tagging. 08 2015.
51. Andrew McCallum and Wei Li. Early results for named entity recognition with
conditional random fields, feature induction and web-enhanced lexicons. In HLT-
NAACL, pages 188–191, 2003.
52. C Hai Leong and N Hwee Tou. Named entity recognition with a maximum entropy
approach. In HLT-NAACL, volume 4, pages 160–163, 2003.
53. Vijay Krishnan and Christopher D Manning. An effective two-stage model for
exploiting non-local dependencies in named entity recognition. In Coling and ACL,
pages 1121–1128, 2006.
54. Wanxiang Che, Mengqiu Wang, Christopher D Manning, and Ting Liu. Named
entity recognition with bilingual constraints. In HLT-NAACL, pages 52–62, 2013.
55. Lev Ratinov and Dan Roth. Design challenges and misconceptions in named entity
recognition. In Coling, pages 147–155, 2009.
56. C?cero dos Santos, Victor Guimaraes, RJ Nitero?i, and Rio de Janeiro. Boosting
named entity recognition with neural character embeddings. In NEWS, 2015.
57. James Hammerton. Named entity recognition with long short-term memory. In
Walter Daelemans and Miles Osborne, editors, CoNLL, pages 172–175, 2003.
58. Jason PC Chiu and Eric Nichols. Named entity recognition with bidirectional
lstm-cnns. arXiv preprint arXiv:1511.08308, 2015.
59. Yoram Singer John Duchi, Elad Hazan. Adaptive subgradient methods for online
learning and stochastic optimization. JMLR, 12:2121–2159, 2011.
60. Yue Zhang and Stephen Clark. Syntactic processing using the generalized percep-
tron and beam search. Computational linguistics, 37(1):105–151, 2011.
61. Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan
Salakhutdinov. Dropout: A simple way to prevent neural networks from overfitting.
JMLR, 15(1):1929–1958, 2014.
62. Xinchi Chen, Xipeng Qiu, Chenxi Zhu, Pengfei Liu, and Xuanjing Huang. Long
short-term memory neural networks for chinese word segmentation. In EMNLP,
pages 1197–1206, Lisbon, Portugal, 2015.
63. Meishan Zhang, Yue Zhang, Wanxiang Che, and Ting Liu. Character-level chinese
dependency parsing. ACL, 2014.
64. Kristina Toutanova, Dan Klein, Christopher D Manning, and Yoram Singer.
Feature-rich part-of-speech tagging with a cyclic dependency network. In NAACL,
pages 173–180, 2003.
65. Li Zhenghua, Chao Jiayuan, Zhang Min, and Chen Wenliang. Coupled sequence
labeling on heterogeneous annotations: Pos tagging as a case study. ACL-IJCNLP,
pages 1783–1792, 2015.
